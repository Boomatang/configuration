apiVersion: template.openshift.io/v1
kind: Template
metadata:
  creationTimestamp: null
  name: configmaps
objects:
  - apiVersion: v1
    data:
      config.yaml: |-
        "auth_enabled": false
        "frontend":
          "compress_responses": true
          "log_queries_longer_than": "5s"
        "http_prefix": ""
        "query_range":
          "align_queries_with_step": true
          "cache_results": true
          "results_cache":
            "cache":
              "enable_fifocache": true
              "fifocache":
                "size": 2048
                "validity": "6h"
            "max_freshness": "1m"
          "split_queries_by_interval": "24h"
        "server":
          "http_listen_port": 9090
        "target": "query-frontend"
    kind: ConfigMap
    metadata:
      labels:
        app.kubernetes.io/component: query-cache
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: cortex-query-frontend
        app.kubernetes.io/part-of: observatorium
      name: observatorium-cortex-query-frontend
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      labels:
        app.kubernetes.io/instance: remote-write-proxy
        app.kubernetes.io/name: nginx
        app.kubernetes.io/part-of: prometheus-ams
      name: prometheus-remote-write-proxy-config
    data:
      nginx.conf: |
        daemon off;
        worker_processes 1;
        error_log /dev/stderr;
        pid /tmp/nginx.pid;

        events {
            worker_connections 1024;
        }

        http {
          log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                            '$status $body_bytes_sent "$http_referer" '
                            '"$http_user_agent" "$http_x_forwarded_for"';

          server {
            listen *:8080;
            server_name _;
            access_log  /dev/stdout  main;
            error_log /dev/stderr;

            location / {
              proxy_set_header THANOS-TENANT FB870BF3-9F3A-44FF-9BF7-D7A047A52F43;
              proxy_pass $THANOS_RECEIVE_URL;
            }
          }
        }
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      name: observatorium-tenants
      labels:
        app.kubernetes.io/name: thanos-receive-controller
    data:
      hashrings.json: |-
        [
          {
            "hashring": "default",
            "tenants": []
          }
        ]
  - apiVersion: v1
    data:
      hashrings.json: |-
        [
          {
            "hashring": "default",
            "tenants": [

            ]
          }
        ]
    kind: ConfigMap
    metadata:
      labels:
        app.kubernetes.io/component: kubernetes-controller
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: thanos-receive-controller
        app.kubernetes.io/part-of: observatorium
      name: observatorium-thanos-receive-controller-tenants
  - apiVersion: v1
    data:
      telemeter-rules.yaml: |-
        groups:
        - name: telemeter.rules
          interval: 1m
          rules:
          - expr: |
              count by (name,reason) (cluster_operator_conditions{condition="Degraded"} == 1)
            record: name_reason:cluster_operator_degraded:count
          - expr: |
              count by (name,reason) (cluster_operator_conditions{condition="Available"} == 0)
            record: name_reason:cluster_operator_unavailable:count
          - expr: |
              sort_desc(max by (_id,code) (code:apiserver_request_count:rate:sum{code=~"(4|5)\\d\\d"}) > 0.5)
            record: id_code:apiserver_request_error_rate_sum:max
          - expr: |
              bottomk by (_id) (1, max by (_id, version) (0 * cluster_version{type="failure"}) or max by (_id, version) (1 + 0 * cluster_version{type="current"}))
            record: id_version:cluster_available
          - expr: |
              topk by (_id) (1, max by (_id, managed, ebs_account, internal) (label_replace(label_replace((subscription_labels{support=~"Standard|Premium|Layered"} * 0 + 1) or subscription_labels * 0, "internal", "true", "email_domain", "redhat.com|(.*\\.|^)ibm.com"), "managed", "", "managed", "false")) + on(_id) group_left(version) (topk by (_id) (1, 0*cluster_version{type="current"})))
            record: id_version_ebs_account_internal:cluster_subscribed
    kind: ConfigMap
    metadata:
      labels:
        app.kubernetes.io/name: thanos-ruler
      name: telemeter-rules-config
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      labels:
        app.kubernetes.io/component: blackbox-prober
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: observatorium-up
        app.kubernetes.io/part-of: observatorium
      name: observatorium-observatorium-up
    data:
      queries.yaml: |-
        "queries":
        - "name": "Clusters"
          "query": "avg_over_time(sum(count by (_id) (max without (prometheus,receive,instance) ( cluster_version{type=\"current\"} )) + on (_id) group_left(_blah) (topk by (_id) (1, 0 *subscription_labels{email_domain!~\"redhat.com|(^|.*\\\\.)ibm.com\"})))[7d:12h])"
        - "name": "Clusters aged 1w"
          "query": "avg_over_time(sum(count by (_id) (max without (prometheus,receive,instance) ( (time() - cluster_version{type=\"initial\"}) > (7 * 24 * 60 * 60) )) + on (_id) group_left(_blah) (topk by (_id) (1, 0 *subscription_labels{email_domain!~\"redhat.com|(^|.*\\\\.)ibm.com\"})))[7d:12h])"
        - "name": "Nodes"
          "query": "avg_over_time(sum(sum by (_id) (max without (prometheus,receive,instance) ( cluster:node_instance_type_count:sum)) + on (_id) group_left(_blah) (topk by (_id) (1, 0 *subscription_labels{email_domain!~\"redhat.com|(^|.*\\\\.)ibm.com\"})))[7d:12h])"
        - "name": "Cores"
          "query": "avg_over_time(sum(sum by (_id) (max without (prometheus,receive,instance) ( cluster:capacity_cpu_cores:sum)) + on (_id) group_left(_blah) (topk by (_id) (1, 0 *subscription_labels{email_domain!~\"redhat.com|(^|.*\\\\.)ibm.com\"})))[7d:12h])"
        - "name": "Workload CPU"
          "query": "avg_over_time(sum(max by (_id) (max without (prometheus,receive,instance) ( workload:cpu_usage_cores:sum )) + on (_id) group_left(_blah) (topk by (_id) (1, 0 *subscription_labels{email_domain!~\"redhat.com|(^|.*\\\\.)ibm.com\"})))[7d:12h])"
        - "name": "Etcd Objects"
          "query": "avg_over_time(sum(sum by (_id) (max without (prometheus,receive,instance) ( instance:etcd_object_counts:sum )) + on (_id) group_left(_blah) (topk by (_id) (1, 0 *subscription_labels{email_domain!~\"redhat.com|(^|.*\\\\.)ibm.com\"})))[7d:12h])"
        - "name": "Weekly Active Users"
          "query": "count(count by (account) (count_over_time(subscription_labels{email_domain!~\"redhat.com|(.*\\\\.|^)ibm.com\"}[7d])))"
        - "name": "Unique customers"
          "query": "count(count by (email_domain) (count_over_time(subscription_labels{email_domain!~\"redhat.com|(.*\\\\.|^)ibm.com|gmail.com\"}[7d])))"
        - "name": "Hybrid customers"
          "query": "count(count by (email_domain) (count by (email_domain,type) (count by (_id,type,email_domain) (cluster_infrastructure_provider{} + on (_id) group_left(email_domain) (topk by (_id) (1, 0 * subscription_labels{}))))) and on (email_domain) (count by (email_domain) (count by (email_domain,type) (count by (_id,type,email_domain) (cluster_infrastructure_provider{} + on (_id) group_left(email_domain) (topk by (_id) (1, 0 * subscription_labels{email_domain!~\"redhat.com|(^|.*\\\\.)ibm.com|gmail.com\"}))))) > 1))"
        - "name": "Subscribed clusters"
          "query": "avg_over_time(sum(count by (_id) (max without (prometheus,receive,instance) ( cluster_version{type=\"current\"} )) + on (_id) group_left(_blah) (topk by (_id) (1, 0 *subscription_labels{support=~\"Standard|Premium|Layered\"})))[7d:12h])"
        - "name": "Subscribed nodes"
          "query": "avg_over_time(sum(sum by (_id) (max without (prometheus,receive,instance) ( cluster:node_instance_type_count:sum)) + on (_id) group_left(_blah) (topk by (_id) (1, 0 *subscription_labels{support=~\"Standard|Premium\"})))[7d:12h])"
        - "name": "Subscribed cores"
          "query": "avg_over_time(sum(sum by (_id) (max without (prometheus,receive,instance) ( cluster:capacity_cpu_cores:sum)) + on (_id) group_left(_blah) (topk by (_id) (1, 0 *subscription_labels{support=~\"Standard|Premium|Layered\"})))[7d:12h])"
        - "name": "Hours failing per week"
          "query": "sum((max by (_id) (count_over_time((cluster_version{type=\"failure\"} * 0 + 1)[7d:15m]) > 1) + on (_id) group_left(email_domain) topk by (_id) (1, 0 * max_over_time(subscription_labels{email_domain!~\"redhat.com|(^|.*\\\\.)ibm.com\"}[7d]))) / 4)"
        - "name": "Average code age (days)"
          "query": "avg_over_time(avg(max by (_id) (max without (prometheus,receive,instance) ( (time() - cluster_version{type=\"current\"}))) + on (_id) group_left(_blah) (topk by (_id) (1, 0 *subscription_labels{email_domain!~\"redhat.com|(^|.*\\\\.)ibm.com\"})))[7d:12h]) / 60 / 60 / 24"
        - "name": "Average subscribed code age (days)"
          "query": "avg_over_time(avg(max by (_id) (max without (prometheus,receive,instance) ( (time() - cluster_version{type=\"current\"}))) + on (_id) group_left(_blah) (topk by (_id) (1, 0 *subscription_labels{support=~\"Standard|Premium|Layered\"})))[7d:12h]) / 60 / 60 / 24"
        - "name": "Clusters upgrading to 4.2"
          "query": "count(((count by (_id) (count_over_time(cluster_version{from_version=~\"4\\\\.1\\\\.\\\\d+\",version=~\"4\\\\.2\\\\.\\\\d+\",type=\"updating\"}[7d])))*0+1) + on(_id) group_left(_blah) (topk by (_id) (1, 0*subscription_labels{email_domain!~\"redhat.com|(.*\\\\.|^)ibm.com\"})))"
        - "name": "Failed 4.2 upgrades"
          "query": "count(((max by (_id) (sum_over_time((1+0*cluster_version{from_version=~\"4\\\\.1\\\\.\\\\d+\",version=~\"4\\\\.2\\\\.\\\\d+\",type=\"failure\"})[7d:15m]))) > 2) + on(_id) group_left(_blah) (topk by (_id) (1, 0*subscription_labels{email_domain!~\"redhat.com|(.*\\\\.|^)ibm.com\"})))"
        - "name": "Clusters upgrading to 4.3"
          "query": "count(((count by (_id) (count_over_time(cluster_version{from_version=~\"4\\\\.2\\\\.\\\\d+\",version=~\"4\\\\.3\\\\.\\\\d+\",type=\"updating\"}[7d])))*0+1) + on(_id) group_left(_blah) (topk by (_id) (1, 0*subscription_labels{email_domain!~\"redhat.com|(.*\\\\.|^)ibm.com\"})))"
        - "name": "Failed 4.3 upgrades"
          "query": "count(((max by (_id) (sum_over_time((1+0*cluster_version{from_version=~\"4\\\\.2\\\\.\\\\d+\",version=~\"4\\\\.3\\\\.\\\\d+\",type=\"failure\"})[7d:15m]))) > 2) + on(_id) group_left(_blah) (topk by (_id) (1, 0*subscription_labels{email_domain!~\"redhat.com|(.*\\\\.|^)ibm.com\"})))"
        - "name": "4.3 clusters"
          "query": "avg_over_time(count(count by (_id) (max without (prometheus,receive,instance) ( cluster_version{type=\"current\",version=~\"4\\\\.3\\\\.\\\\d+\"} )) + on (_id) group_left(_blah) (topk by (_id) (1, 0 *subscription_labels{email_domain!~\"redhat.com|(^|.*\\\\.)ibm.com\"})))[1d:12h])"
        - "name": "4.2 clusters"
          "query": "avg_over_time(count(count by (_id) (max without (prometheus,receive,instance) ( cluster_version{type=\"current\",version=~\"4\\\\.2\\\\.\\\\d+\"} )) + on (_id) group_left(_blah) (topk by (_id) (1, 0 *subscription_labels{email_domain!~\"redhat.com|(^|.*\\\\.)ibm.com\"})))[1d:12h])"
        - "name": "4.1 clusters"
          "query": "avg_over_time(count(count by (_id) (max without (prometheus,receive,instance) ( cluster_version{type=\"current\",version=~\"4\\\\.1\\\\.\\\\d+\"} )) + on (_id) group_left(_blah) (topk by (_id) (1, 0 *subscription_labels{email_domain!~\"redhat.com|(^|.*\\\\.)ibm.com\"})))[1d:12h])"
