apiVersion: v1
kind: Template
metadata:
  name: observatorium
objects:
- apiVersion: v1
  data:
    rbac.yaml: |-
      "roleBindings":
      - "name": "rhobs"
        "roles":
        - "rhobs"
        "subjects":
        - "kind": "group"
          "name": "rhobs"
      - "name": "telemeter-server"
        "roles":
        - "telemeter-write"
        "subjects":
        - "kind": "user"
          "name": "service-account-telemeter-service-staging"
        - "kind": "user"
          "name": "service-account-telemeter-service"
      - "name": "dptp-collector"
        "roles":
        - "dptp-write"
        "subjects":
        - "kind": "user"
          "name": "service-account-observatorium-dptp-collector"
        - "kind": "user"
          "name": "service-account-observatorium-dptp-collector-staging"
      - "name": "dptp-reader"
        "roles":
        - "dptp-read"
        "subjects":
        - "kind": "user"
          "name": "service-account-observatorium-dptp-reader"
        - "kind": "user"
          "name": "service-account-observatorium-dptp-reader-staging"
        - "kind": "user"
          "name": "rhn-engineering-aconway"
        - "kind": "user"
          "name": "brejones"
        - "kind": "user"
          "name": "cvogel1"
        - "kind": "user"
          "name": "ewolinet@redhat.com"
        - "kind": "user"
          "name": "jcantril@redhat.com"
        - "kind": "user"
          "name": "ptsiraki@redhat.com"
        - "kind": "user"
          "name": "dmace@redhat.com"
        - "kind": "user"
          "name": "sbatsche@redhat.com"
        - "kind": "user"
          "name": "vrutkovs@redhat.com"
        - "kind": "user"
          "name": "trking"
      "roles":
      - "name": "rhobs"
        "permissions":
        - "read"
        - "write"
        "resources":
        - "metrics"
        - "logs"
        "tenants":
        - "rhobs"
      - "name": "telemeter-write"
        "permissions":
        - "write"
        "resources":
        - "metrics"
        "tenants":
        - "telemeter"
      - "name": "dptp-write"
        "permissions":
        - "write"
        "resources":
        - "logs"
        "tenants":
        - "dptp"
      - "name": "dptp-read"
        "permissions":
        - "read"
        "resources":
        - "logs"
        "tenants":
        - "dptp"
  kind: ConfigMap
  metadata:
    annotations:
      qontract.recycle: "true"
    labels:
      app.kubernetes.io/component: api
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: observatorium-api
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${OBSERVATORIUM_API_IMAGE_TAG}
    name: observatorium-observatorium-api
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app.kubernetes.io/component: api
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: observatorium-api
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${OBSERVATORIUM_API_IMAGE_TAG}
    name: observatorium-observatorium-api
  spec:
    replicas: ${{OBSERVATORIUM_API_REPLICAS}}
    selector:
      matchLabels:
        app.kubernetes.io/component: api
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: observatorium-api
        app.kubernetes.io/part-of: observatorium
    strategy:
      rollingUpdate:
        maxSurge: 0
        maxUnavailable: 1
    template:
      metadata:
        labels:
          app.kubernetes.io/component: api
          app.kubernetes.io/instance: observatorium
          app.kubernetes.io/name: observatorium-api
          app.kubernetes.io/part-of: observatorium
          app.kubernetes.io/version: ${OBSERVATORIUM_API_IMAGE_TAG}
      spec:
        containers:
        - args:
          - --web.listen=0.0.0.0:8080
          - --web.internal.listen=0.0.0.0:8081
          - --metrics.read.endpoint=http://observatorium-thanos-query-frontend.${NAMESPACE}.svc.cluster.local:9090
          - --metrics.write.endpoint=http://observatorium-thanos-receive.${NAMESPACE}.svc.cluster.local:19291
          - --log.level=warn
          - --logs.read.endpoint=http://observatorium-loki-query-frontend-http.${OBSERVATORIUM_LOGS_NAMESPACE}.svc.cluster.local:3100
          - --logs.tail.endpoint=http://observatorium-loki-querier-http.${OBSERVATORIUM_LOGS_NAMESPACE}.svc.cluster.local:3100
          - --logs.write.endpoint=http://observatorium-loki-distributor-http.${OBSERVATORIUM_LOGS_NAMESPACE}.svc.cluster.local:3100
          - --rbac.config=/etc/observatorium/rbac.yaml
          - --tenants.config=/etc/observatorium/tenants.yaml
          - --middleware.rate-limiter.grpc-address=observatorium-gubernator.${NAMESPACE}.svc.cluster.local:8081
          image: ${OBSERVATORIUM_API_IMAGE}:${OBSERVATORIUM_API_IMAGE_TAG}
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /live
              port: 8081
              scheme: HTTP
            periodSeconds: 30
          name: observatorium-api
          ports:
          - containerPort: 8081
            name: internal
          - containerPort: 8080
            name: public
          readinessProbe:
            failureThreshold: 12
            httpGet:
              path: /ready
              port: 8081
              scheme: HTTP
            periodSeconds: 5
          resources:
            limits:
              cpu: ${OBSERVATORIUM_API_CPU_LIMIT}
              memory: ${OBSERVATORIUM_API_MEMORY_LIMIT}
            requests:
              cpu: ${OBSERVATORIUM_API_CPU_REQUEST}
              memory: ${OBSERVATORIUM_API_MEMORY_REQUEST}
          volumeMounts:
          - mountPath: /etc/observatorium/rbac.yaml
            name: rbac
            readOnly: true
            subPath: rbac.yaml
          - mountPath: /etc/observatorium/tenants.yaml
            name: tenants
            readOnly: true
            subPath: tenants.yaml
        - args:
          - --web.listen=127.0.0.1:8082
          - --web.internal.listen=0.0.0.0:8083
          - --web.healthchecks.url=http://127.0.0.1:8082
          - --log.level=warn
          - --ams.url=${AMS_URL}
          - --resource-type-prefix=observatorium
          - --oidc.client-id=$(CLIENT_ID)
          - --oidc.client-secret=$(CLIENT_SECRET)
          - --oidc.issuer-url=$(ISSUER_URL)
          - --opa.package=observatorium
          - --memcached=memcached-0.memcached.${NAMESPACE}.svc.cluster.local:11211
          - --memcached.expire=${OPA_AMS_MEMCACHED_EXPIRE}
          env:
          - name: ISSUER_URL
            valueFrom:
              secretKeyRef:
                key: issuer-url
                name: observatorium-observatorium-api
          - name: CLIENT_ID
            valueFrom:
              secretKeyRef:
                key: client-id
                name: observatorium-observatorium-api
          - name: CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                key: client-secret
                name: observatorium-observatorium-api
          image: ${OPA_AMS_IMAGE}:${OPA_AMS_IMAGE_TAG}
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /live
              port: 8083
              scheme: HTTP
            periodSeconds: 30
          name: opa-ams
          ports:
          - containerPort: 8082
            name: opa-ams-api
          - containerPort: 8083
            name: opa-ams-metrics
          readinessProbe:
            failureThreshold: 12
            httpGet:
              path: /ready
              port: 8083
              scheme: HTTP
            periodSeconds: 5
          resources:
            limits:
              cpu: ${OPA_AMS_CPU_LIMIT}
              memory: ${OPA_AMS_MEMORY_LIMIT}
            requests:
              cpu: ${OPA_AMS_CPU_REQUEST}
              memory: ${OPA_AMS_MEMORY_REQUEST}
        serviceAccountName: observatorium-observatorium-api
        volumes:
        - configMap:
            name: observatorium-observatorium-api
          name: rbac
        - name: tenants
          secret:
            secretName: observatorium-observatorium-api
- apiVersion: v1
  kind: Secret
  metadata:
    labels:
      app.kubernetes.io/component: api
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: observatorium-api
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${OBSERVATORIUM_API_IMAGE_TAG}
    name: observatorium-observatorium-api
  stringData:
    tenants.yaml: |-
      "tenants":
      - "id": "770c1124-6ae8-4324-a9d4-9ce08590094b"
        "name": "rhobs"
        "oidc":
          "clientID": "id"
          "clientSecret": "secret"
          "groupClaim": "groups"
          "issuerURL": "https://rhobs.tenants.observatorium.io"
          "usernameClaim": "preferred_username"
      - "id": "FB870BF3-9F3A-44FF-9BF7-D7A047A52F43"
        "name": "telemeter"
        "oidc":
          "clientID": "id"
          "clientSecret": "secret"
          "issuerURL": "https://sso.redhat.com/auth/realms/redhat-external"
          "usernameClaim": "preferred_username"
      - "id": "AC879303-C60F-4D0D-A6D5-A485CFD638B8"
        "name": "dptp"
        "oidc":
          "clientID": "id"
          "clientSecret": "secret"
          "issuerURL": "https://sso.redhat.com/auth/realms/redhat-external"
          "usernameClaim": "preferred_username"
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app.kubernetes.io/component: api
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: observatorium-api
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${OBSERVATORIUM_API_IMAGE_TAG}
    name: observatorium-observatorium-api
  spec:
    ports:
    - name: internal
      port: 8081
      targetPort: 8081
    - name: public
      port: 8080
      targetPort: 8080
    - name: opa-ams-api
      port: 8082
      targetPort: 8082
    - name: opa-ams-metrics
      port: 8083
      targetPort: 8083
    selector:
      app.kubernetes.io/component: api
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: observatorium-api
      app.kubernetes.io/part-of: observatorium
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    labels:
      app.kubernetes.io/component: api
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: observatorium-api
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${OBSERVATORIUM_API_IMAGE_TAG}
    name: observatorium-observatorium-api
- apiVersion: monitoring.coreos.com/v1
  kind: ServiceMonitor
  metadata:
    labels:
      prometheus: app-sre
    name: observatorium-api
  spec:
    endpoints:
    - port: internal
    - port: opa-ams-metrics
    namespaceSelector:
      matchNames:
      - ${NAMESPACE}
    selector:
      matchLabels:
        app.kubernetes.io/component: api
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: observatorium-api
        app.kubernetes.io/part-of: observatorium
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app.kubernetes.io/component: rate-limiter
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: gubernator
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${GUBERNATOR_IMAGE_TAG}
    name: observatorium-gubernator
  spec:
    replicas: ${{GUBERNATOR_REPLICAS}}
    selector:
      matchLabels:
        app.kubernetes.io/component: rate-limiter
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: gubernator
        app.kubernetes.io/part-of: observatorium
    strategy:
      rollingUpdate:
        maxSurge: 0
        maxUnavailable: 1
    template:
      metadata:
        labels:
          app.kubernetes.io/component: rate-limiter
          app.kubernetes.io/instance: observatorium
          app.kubernetes.io/name: gubernator
          app.kubernetes.io/part-of: observatorium
          app.kubernetes.io/version: ${GUBERNATOR_IMAGE_TAG}
      spec:
        containers:
        - env:
          - name: GUBER_K8S_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: GUBER_K8S_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: GUBER_HTTP_ADDRESS
            value: 0.0.0.0:8080
          - name: GUBER_GRPC_ADDRESS
            value: 0.0.0.0:8081
          - name: GUBER_K8S_POD_PORT
            value: "8081"
          - name: GUBER_K8S_ENDPOINTS_SELECTOR
            value: app.kubernetes.io/name=gubernator
          image: ${GUBERNATOR_IMAGE}:${GUBERNATOR_IMAGE_TAG}
          name: gubernator
          ports:
          - containerPort: 8081
            name: grpc
          - containerPort: 8080
            name: http
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /v1/HealthCheck
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 30
            timeoutSeconds: 1
          resources:
            limits:
              cpu: ${GUBERNATOR_CPU_LIMIT}
              memory: ${GUBERNATOR_MEMORY_LIMIT}
            requests:
              cpu: ${GUBERNATOR_CPU_REQUEST}
              memory: ${GUBERNATOR_MEMORY_REQUEST}
        restartPolicy: Always
        serviceAccountName: observatorium-gubernator
- apiVersion: rbac.authorization.k8s.io/v1
  kind: Role
  metadata:
    labels:
      app.kubernetes.io/component: rate-limiter
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: gubernator
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${GUBERNATOR_IMAGE_TAG}
    name: observatorium-gubernator
  rules:
  - apiGroups:
    - ""
    resources:
    - endpoints
    verbs:
    - list
    - watch
    - get
- apiVersion: rbac.authorization.k8s.io/v1
  kind: RoleBinding
  metadata:
    labels:
      app.kubernetes.io/component: rate-limiter
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: gubernator
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${GUBERNATOR_IMAGE_TAG}
    name: observatorium-gubernator
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: Role
    name: observatorium-gubernator
  subjects:
  - kind: ServiceAccount
    name: observatorium-gubernator
    namespace: ${NAMESPACE}
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app.kubernetes.io/component: rate-limiter
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: gubernator
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${GUBERNATOR_IMAGE_TAG}
    name: observatorium-gubernator
  spec:
    ports:
    - name: grpc
      port: 8081
      targetPort: 8081
    - name: http
      port: 8080
      targetPort: 8080
    selector:
      app.kubernetes.io/component: rate-limiter
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: gubernator
      app.kubernetes.io/part-of: observatorium
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    labels:
      app.kubernetes.io/component: rate-limiter
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: gubernator
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${GUBERNATOR_IMAGE_TAG}
    name: observatorium-gubernator
- apiVersion: monitoring.coreos.com/v1
  kind: ServiceMonitor
  metadata:
    labels:
      prometheus: app-sre
    name: observatorium-gubernator
  spec:
    endpoints:
    - port: http
    namespaceSelector:
      matchNames:
      - ${NAMESPACE}
    selector:
      matchLabels:
        app.kubernetes.io/component: rate-limiter
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: gubernator
        app.kubernetes.io/part-of: observatorium
- apiVersion: v1
  data:
    queries.yaml: |-
      "queries":
      - "name": "Clusters"
        "query": "avg_over_time(sum(count by (_id) (max without (prometheus,receive,instance) ( cluster_version{type=\"current\"} )) + on (_id) group_left(_blah) (topk by (_id) (1, 0 *subscription_labels{email_domain!~\"redhat.com|(^|.*\\\\.)ibm.com\"})))[7d:12h])"
      - "name": "Clusters aged 1w"
        "query": "avg_over_time(sum(count by (_id) (max without (prometheus,receive,instance) ( (time() - cluster_version{type=\"initial\"}) > (7 * 24 * 60 * 60) )) + on (_id) group_left(_blah) (topk by (_id) (1, 0 *subscription_labels{email_domain!~\"redhat.com|(^|.*\\\\.)ibm.com\"})))[7d:12h])"
      - "name": "Nodes"
        "query": "avg_over_time(sum(sum by (_id) (max without (prometheus,receive,instance) ( cluster:node_instance_type_count:sum)) + on (_id) group_left(_blah) (topk by (_id) (1, 0 *subscription_labels{email_domain!~\"redhat.com|(^|.*\\\\.)ibm.com\"})))[7d:12h])"
      - "name": "Cores"
        "query": "avg_over_time(sum(sum by (_id) (max without (prometheus,receive,instance) ( cluster:capacity_cpu_cores:sum)) + on (_id) group_left(_blah) (topk by (_id) (1, 0 *subscription_labels{email_domain!~\"redhat.com|(^|.*\\\\.)ibm.com\"})))[7d:12h])"
      - "name": "Workload CPU"
        "query": "avg_over_time(sum(max by (_id) (max without (prometheus,receive,instance) ( workload:cpu_usage_cores:sum )) + on (_id) group_left(_blah) (topk by (_id) (1, 0 *subscription_labels{email_domain!~\"redhat.com|(^|.*\\\\.)ibm.com\"})))[7d:12h])"
      - "name": "Etcd Objects"
        "query": "avg_over_time(sum(sum by (_id) (max without (prometheus,receive,instance) ( instance:etcd_object_counts:sum )) + on (_id) group_left(_blah) (topk by (_id) (1, 0 *subscription_labels{email_domain!~\"redhat.com|(^|.*\\\\.)ibm.com\"})))[7d:12h])"
      - "name": "Weekly Active Users"
        "query": "count(count by (account) (count_over_time(subscription_labels{email_domain!~\"redhat.com|(.*\\\\.|^)ibm.com\"}[7d])))"
      - "name": "Unique customers"
        "query": "count(count by (email_domain) (count_over_time(subscription_labels{email_domain!~\"redhat.com|(.*\\\\.|^)ibm.com|gmail.com\"}[7d])))"
      - "name": "Hybrid customers"
        "query": "count(count by (email_domain) (count by (email_domain,type) (count by (_id,type,email_domain) (cluster_infrastructure_provider{} + on (_id) group_left(email_domain) (topk by (_id) (1, 0 * subscription_labels{}))))) and on (email_domain) (count by (email_domain) (count by (email_domain,type) (count by (_id,type,email_domain) (cluster_infrastructure_provider{} + on (_id) group_left(email_domain) (topk by (_id) (1, 0 * subscription_labels{email_domain!~\"redhat.com|(^|.*\\\\.)ibm.com|gmail.com\"}))))) > 1))"
      - "name": "Subscribed clusters"
        "query": "avg_over_time(sum(count by (_id) (max without (prometheus,receive,instance) ( cluster_version{type=\"current\"} )) + on (_id) group_left(_blah) (topk by (_id) (1, 0 *subscription_labels{support=~\"Standard|Premium|Layered\"})))[7d:12h])"
      - "name": "Subscribed nodes"
        "query": "avg_over_time(sum(sum by (_id) (max without (prometheus,receive,instance) ( cluster:node_instance_type_count:sum)) + on (_id) group_left(_blah) (topk by (_id) (1, 0 *subscription_labels{support=~\"Standard|Premium\"})))[7d:12h])"
      - "name": "Subscribed cores"
        "query": "avg_over_time(sum(sum by (_id) (max without (prometheus,receive,instance) ( cluster:capacity_cpu_cores:sum)) + on (_id) group_left(_blah) (topk by (_id) (1, 0 *subscription_labels{support=~\"Standard|Premium|Layered\"})))[7d:12h])"
      - "name": "Hours failing per week"
        "query": "sum((max by (_id) (count_over_time((cluster_version{type=\"failure\"} * 0 + 1)[7d:15m]) > 1) + on (_id) group_left(email_domain) topk by (_id) (1, 0 * max_over_time(subscription_labels{email_domain!~\"redhat.com|(^|.*\\\\.)ibm.com\"}[7d]))) / 4)"
      - "name": "Average code age (days)"
        "query": "avg_over_time(avg(max by (_id) (max without (prometheus,receive,instance) ( (time() - cluster_version{type=\"current\"}))) + on (_id) group_left(_blah) (topk by (_id) (1, 0 *subscription_labels{email_domain!~\"redhat.com|(^|.*\\\\.)ibm.com\"})))[7d:12h]) / 60 / 60 / 24"
      - "name": "Average subscribed code age (days)"
        "query": "avg_over_time(avg(max by (_id) (max without (prometheus,receive,instance) ( (time() - cluster_version{type=\"current\"}))) + on (_id) group_left(_blah) (topk by (_id) (1, 0 *subscription_labels{support=~\"Standard|Premium|Layered\"})))[7d:12h]) / 60 / 60 / 24"
      - "name": "Clusters upgrading to 4.2"
        "query": "count(((count by (_id) (count_over_time(cluster_version{from_version=~\"4\\\\.1\\\\.\\\\d+\",version=~\"4\\\\.2\\\\.\\\\d+\",type=\"updating\"}[7d])))*0+1) + on(_id) group_left(_blah) (topk by (_id) (1, 0*subscription_labels{email_domain!~\"redhat.com|(.*\\\\.|^)ibm.com\"})))"
      - "name": "Failed 4.2 upgrades"
        "query": "count(((max by (_id) (sum_over_time((1+0*cluster_version{from_version=~\"4\\\\.1\\\\.\\\\d+\",version=~\"4\\\\.2\\\\.\\\\d+\",type=\"failure\"})[7d:15m]))) > 2) + on(_id) group_left(_blah) (topk by (_id) (1, 0*subscription_labels{email_domain!~\"redhat.com|(.*\\\\.|^)ibm.com\"})))"
      - "name": "Clusters upgrading to 4.3"
        "query": "count(((count by (_id) (count_over_time(cluster_version{from_version=~\"4\\\\.2\\\\.\\\\d+\",version=~\"4\\\\.3\\\\.\\\\d+\",type=\"updating\"}[7d])))*0+1) + on(_id) group_left(_blah) (topk by (_id) (1, 0*subscription_labels{email_domain!~\"redhat.com|(.*\\\\.|^)ibm.com\"})))"
      - "name": "Clusters upgrading to 4.4"
        "query": "count(((count by (_id) (count_over_time(cluster_version{from_version=~\"4\\\\.2\\\\.\\\\d+\",version=~\"4\\\\.4\\\\.\\\\d+\",type=\"updating\"}[7d])))*0+1) + on(_id) group_left(_blah) (topk by (_id) (1, 0*subscription_labels{email_domain!~\"redhat.com|(.*\\\\.|^)ibm.com\"})))"
      - "name": "Failed 4.3 upgrades"
        "query": "count(((max by (_id) (sum_over_time((1+0*cluster_version{from_version=~\"4\\\\.2\\\\.\\\\d+\",version=~\"4\\\\.3\\\\.\\\\d+\",type=\"failure\"})[7d:15m]))) > 2) + on(_id) group_left(_blah) (topk by (_id) (1, 0*subscription_labels{email_domain!~\"redhat.com|(.*\\\\.|^)ibm.com\"})))"
      - "name": "Failed 4.4 upgrades"
        "query": "count(((max by (_id) (sum_over_time((1+0*cluster_version{from_version=~\"4\\\\.2\\\\.\\\\d+\",version=~\"4\\\\.4\\\\.\\\\d+\",type=\"failure\"})[7d:15m]))) > 2) + on(_id) group_left(_blah) (topk by (_id) (1, 0*subscription_labels{email_domain!~\"redhat.com|(.*\\\\.|^)ibm.com\"})))"
      - "name": "4.4 clusters"
        "query": "avg_over_time(count(count by (_id) (max without (prometheus,receive,instance) ( cluster_version{type=\"current\",version=~\"4\\\\.4\\\\.\\\\d+\"} )) + on (_id) group_left(_blah) (topk by (_id) (1, 0 *subscription_labels{email_domain!~\"redhat.com|(^|.*\\\\.)ibm.com\"})))[1d:12h])"
      - "name": "4.3 clusters"
        "query": "avg_over_time(count(count by (_id) (max without (prometheus,receive,instance) ( cluster_version{type=\"current\",version=~\"4\\\\.3\\\\.\\\\d+\"} )) + on (_id) group_left(_blah) (topk by (_id) (1, 0 *subscription_labels{email_domain!~\"redhat.com|(^|.*\\\\.)ibm.com\"})))[1d:12h])"
      - "name": "4.2 clusters"
        "query": "avg_over_time(count(count by (_id) (max without (prometheus,receive,instance) ( cluster_version{type=\"current\",version=~\"4\\\\.2\\\\.\\\\d+\"} )) + on (_id) group_left(_blah) (topk by (_id) (1, 0 *subscription_labels{email_domain!~\"redhat.com|(^|.*\\\\.)ibm.com\"})))[1d:12h])"
      - "name": "4.1 clusters"
        "query": "avg_over_time(count(count by (_id) (max without (prometheus,receive,instance) ( cluster_version{type=\"current\",version=~\"4\\\\.1\\\\.\\\\d+\"} )) + on (_id) group_left(_blah) (topk by (_id) (1, 0 *subscription_labels{email_domain!~\"redhat.com|(^|.*\\\\.)ibm.com\"})))[1d:12h])"
  kind: ConfigMap
  metadata:
    labels:
      app.kubernetes.io/component: blackbox-prober
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: observatorium-up
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: master-2020-06-15-d763595
    name: observatorium-observatorium-up
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app.kubernetes.io/component: blackbox-prober
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: observatorium-up
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: master-2020-06-15-d763595
    name: observatorium-observatorium-up
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/component: blackbox-prober
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: observatorium-up
        app.kubernetes.io/part-of: observatorium
    template:
      metadata:
        labels:
          app.kubernetes.io/component: blackbox-prober
          app.kubernetes.io/instance: observatorium
          app.kubernetes.io/name: observatorium-up
          app.kubernetes.io/part-of: observatorium
          app.kubernetes.io/version: master-2020-06-15-d763595
      spec:
        containers:
        - args:
          - --duration=0
          - --log.level=debug
          - --endpoint-type=metrics
          - --queries-file=/etc/up/queries.yaml
          - --endpoint-read=http://observatorium-thanos-query-frontend.${NAMESPACE}.svc:9090/api/v1/query
          image: quay.io/observatorium/up:master-2020-06-15-d763595
          name: observatorium-up
          ports:
          - containerPort: 8080
            name: http
          resources:
            limits:
              cpu: 20m
              memory: 50Mi
            requests:
              cpu: 5m
              memory: 10Mi
          volumeMounts:
          - mountPath: /etc/up/
            name: query-config
            readOnly: false
        volumes:
        - configMap:
            name: observatorium-observatorium-up
          name: query-config
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app.kubernetes.io/component: blackbox-prober
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: observatorium-up
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: master-2020-06-15-d763595
    name: observatorium-observatorium-up
  spec:
    ports:
    - name: http
      port: 8080
      targetPort: 8080
    selector:
      app.kubernetes.io/component: blackbox-prober
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: observatorium-up
      app.kubernetes.io/part-of: observatorium
- apiVersion: monitoring.coreos.com/v1
  kind: ServiceMonitor
  metadata:
    labels:
      prometheus: app-sre
    name: observatorium-up
  spec:
    endpoints:
    - port: http
    namespaceSelector:
      matchNames:
      - ${NAMESPACE}
    selector:
      matchLabels:
        app.kubernetes.io/component: blackbox-prober
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: observatorium-up
        app.kubernetes.io/part-of: observatorium
- apiVersion: v1
  data:
    session_secret: ""
  kind: Secret
  metadata:
    labels:
      app.kubernetes.io/component: database-compactor
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-compact
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
    name: compact-proxy
  type: Opaque
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      service.alpha.openshift.io/serving-cert-secret-name: compact-tls
    labels:
      app.kubernetes.io/component: database-compactor
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-compact
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
    name: observatorium-thanos-compact
  spec:
    ports:
    - name: http
      port: 10902
      targetPort: 10902
    - name: https
      port: 8443
      targetPort: 8443
    selector:
      app.kubernetes.io/component: database-compactor
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-compact
      app.kubernetes.io/part-of: observatorium
- apiVersion: monitoring.coreos.com/v1
  kind: ServiceMonitor
  metadata:
    labels:
      app.kubernetes.io/component: database-compactor
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-compact
      app.kubernetes.io/part-of: observatorium
      prometheus: app-sre
    name: observatorium-thanos-compact
  spec:
    endpoints:
    - port: http
      relabelings:
      - separator: /
        sourceLabels:
        - namespace
        - pod
        targetLabel: instance
    namespaceSelector:
      matchNames:
      - ${NAMESPACE}
    selector:
      matchLabels:
        app.kubernetes.io/component: database-compactor
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: thanos-compact
        app.kubernetes.io/part-of: observatorium
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    labels:
      app.kubernetes.io/component: database-compactor
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-compact
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
    name: observatorium-thanos-compact
  spec:
    replicas: ${{THANOS_COMPACTOR_REPLICAS}}
    selector:
      matchLabels:
        app.kubernetes.io/component: database-compactor
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: thanos-compact
        app.kubernetes.io/part-of: observatorium
    serviceName: observatorium-thanos-compact
    template:
      metadata:
        labels:
          app.kubernetes.io/component: database-compactor
          app.kubernetes.io/instance: observatorium
          app.kubernetes.io/name: thanos-compact
          app.kubernetes.io/part-of: observatorium
          app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
      spec:
        containers:
        - args:
          - compact
          - --wait
          - --log.level=${THANOS_COMPACTOR_LOG_LEVEL}
          - --log.format=logfmt
          - --objstore.config=$(OBJSTORE_CONFIG)
          - --data-dir=/var/thanos/compact
          - --debug.accept-malformed-index
          - --retention.resolution-raw=14d
          - --retention.resolution-5m=1s
          - --retention.resolution-1h=1s
          - --delete-delay=48h
          - --downsampling.disable
          - --deduplication.replica-label=replica
          - --debug.max-compaction-level=3
          env:
          - name: OBJSTORE_CONFIG
            valueFrom:
              secretKeyRef:
                key: thanos.yaml
                name: ${THANOS_CONFIG_SECRET}
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                key: aws_access_key_id
                name: ${THANOS_S3_SECRET}
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                key: aws_secret_access_key
                name: ${THANOS_S3_SECRET}
          image: ${THANOS_IMAGE}:${THANOS_IMAGE_TAG}
          livenessProbe:
            failureThreshold: 4
            httpGet:
              path: /-/healthy
              port: 10902
              scheme: HTTP
            periodSeconds: 30
          name: thanos-compact
          ports:
          - containerPort: 10902
            name: http
          readinessProbe:
            failureThreshold: 20
            httpGet:
              path: /-/ready
              port: 10902
              scheme: HTTP
            periodSeconds: 5
          resources:
            limits:
              cpu: ${THANOS_COMPACTOR_CPU_LIMIT}
              memory: ${THANOS_COMPACTOR_MEMORY_LIMIT}
            requests:
              cpu: ${THANOS_COMPACTOR_CPU_REQUEST}
              memory: ${THANOS_COMPACTOR_MEMORY_REQUEST}
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /var/thanos/compact
            name: data
            readOnly: false
        - args:
          - -provider=openshift
          - -https-address=:8443
          - -http-address=
          - -email-domain=*
          - -upstream=http://localhost:10902
          - -openshift-service-account=prometheus-telemeter
          - '-openshift-sar={"resource": "namespaces", "verb": "get", "name": "${NAMESPACE}", "namespace": "${NAMESPACE}"}'
          - '-openshift-delegate-urls={"/": {"resource": "namespaces", "verb": "get", "name": "${NAMESPACE}", "namespace": "${NAMESPACE}"}}'
          - -tls-cert=/etc/tls/private/tls.crt
          - -tls-key=/etc/tls/private/tls.key
          - -client-secret-file=/var/run/secrets/kubernetes.io/serviceaccount/token
          - -cookie-secret-file=/etc/proxy/secrets/session_secret
          - -openshift-ca=/etc/pki/tls/cert.pem
          - -openshift-ca=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          image: ${PROXY_IMAGE}:${PROXY_IMAGE_TAG}
          name: oauth-proxy
          ports:
          - containerPort: 8443
            name: https
          resources:
            limits:
              cpu: ${OAUTH_PROXY_CPU_LIMITS}
              memory: ${OAUTH_PROXY_MEMORY_LIMITS}
            requests:
              cpu: ${OAUTH_PROXY_CPU_REQUEST}
              memory: ${OAUTH_PROXY_MEMORY_REQUEST}
          volumeMounts:
          - mountPath: /etc/tls/private
            name: compact-tls
            readOnly: false
          - mountPath: /etc/proxy/secrets
            name: compact-proxy
            readOnly: false
        serviceAccountName: prometheus-telemeter
        terminationGracePeriodSeconds: 120
        volumes:
        - name: compact-tls
          secret:
            secretName: compact-tls
        - name: compact-proxy
          secret:
            secretName: compact-proxy
    volumeClaimTemplates:
    - metadata:
        labels:
          app.kubernetes.io/component: database-compactor
          app.kubernetes.io/instance: observatorium
          app.kubernetes.io/name: thanos-compact
          app.kubernetes.io/part-of: observatorium
        name: data
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: ${THANOS_COMPACTOR_PVC_REQUEST}
        storageClassName: ${STORAGE_CLASS}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app.kubernetes.io/component: query-layer
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-query
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
    name: observatorium-thanos-query
  spec:
    replicas: ${{THANOS_QUERIER_REPLICAS}}
    selector:
      matchLabels:
        app.kubernetes.io/component: query-layer
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: thanos-query
        app.kubernetes.io/part-of: observatorium
    template:
      metadata:
        labels:
          app.kubernetes.io/component: query-layer
          app.kubernetes.io/instance: observatorium
          app.kubernetes.io/name: thanos-query
          app.kubernetes.io/part-of: observatorium
          app.kubernetes.io/tracing: jaeger-agent
          app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: app.kubernetes.io/name
                    operator: In
                    values:
                    - thanos-query
                namespaces:
                - ${NAMESPACE}
                topologyKey: kubernetes.io/hostname
              weight: 100
        containers:
        - args:
          - query
          - --grpc-address=0.0.0.0:10901
          - --http-address=0.0.0.0:9090
          - --log.level=${THANOS_QUERIER_LOG_LEVEL}
          - --log.format=logfmt
          - --query.replica-label=replica
          - --query.replica-label=rule_replica
          - --query.replica-label=prometheus_replica
          - --store=dnssrv+_grpc._tcp.observatorium-thanos-rule.${NAMESPACE}.svc.cluster.local
          - --store=dnssrv+_grpc._tcp.observatorium-thanos-store-shard-0.${NAMESPACE}.svc.cluster.local
          - --store=dnssrv+_grpc._tcp.observatorium-thanos-store-shard-1.${NAMESPACE}.svc.cluster.local
          - --store=dnssrv+_grpc._tcp.observatorium-thanos-store-shard-2.${NAMESPACE}.svc.cluster.local
          - --store=dnssrv+_grpc._tcp.observatorium-thanos-receive-default.${NAMESPACE}.svc.cluster.local
          - --query.timeout=15m
          - --query.lookback-delta=15m
          - |-
            --tracing.config="config":
              "sampler_param": 2
              "sampler_type": "ratelimiting"
              "service_name": "thanos-query"
            "type": "JAEGER"
          image: ${THANOS_IMAGE}:${THANOS_IMAGE_TAG}
          livenessProbe:
            failureThreshold: 4
            httpGet:
              path: /-/healthy
              port: 9090
              scheme: HTTP
            periodSeconds: 30
          name: thanos-query
          ports:
          - containerPort: 10901
            name: grpc
          - containerPort: 9090
            name: http
          - containerPort: 9091
            name: https
          readinessProbe:
            failureThreshold: 20
            httpGet:
              path: /-/ready
              port: 9090
              scheme: HTTP
            periodSeconds: 5
          resources:
            limits:
              cpu: ${THANOS_QUERIER_CPU_LIMIT}
              memory: ${THANOS_QUERIER_MEMORY_LIMIT}
            requests:
              cpu: ${THANOS_QUERIER_CPU_REQUEST}
              memory: ${THANOS_QUERIER_MEMORY_REQUEST}
          terminationMessagePolicy: FallbackToLogsOnError
        - args:
          - -provider=openshift
          - -https-address=:9091
          - -http-address=
          - -email-domain=*
          - -upstream=http://localhost:9090
          - -openshift-service-account=prometheus-telemeter
          - '-openshift-sar={"resource": "namespaces", "verb": "get", "name": "${NAMESPACE}", "namespace": "${NAMESPACE}"}'
          - '-openshift-delegate-urls={"/": {"resource": "namespaces", "verb": "get", "name": "${NAMESPACE}", "namespace": "${NAMESPACE}"}}'
          - -tls-cert=/etc/tls/private/tls.crt
          - -tls-key=/etc/tls/private/tls.key
          - -client-secret-file=/var/run/secrets/kubernetes.io/serviceaccount/token
          - -cookie-secret-file=/etc/proxy/secrets/session_secret
          - -openshift-ca=/etc/pki/tls/cert.pem
          - -openshift-ca=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          image: ${PROXY_IMAGE}:${PROXY_IMAGE_TAG}
          name: oauth-proxy
          ports:
          - containerPort: 9091
            name: https
          resources:
            limits:
              cpu: ${OAUTH_PROXY_CPU_LIMITS}
              memory: ${OAUTH_PROXY_MEMORY_LIMITS}
            requests:
              cpu: ${OAUTH_PROXY_CPU_REQUEST}
              memory: ${OAUTH_PROXY_MEMORY_REQUEST}
          volumeMounts:
          - mountPath: /etc/tls/private
            name: query-tls
            readOnly: false
          - mountPath: /etc/proxy/secrets
            name: query-proxy
            readOnly: false
        - args:
          - --reporter.grpc.host-port=dns:///jaeger-collector-headless.$(NAMESPACE).svc:14250
          - --reporter.type=grpc
          - --jaeger.tags=pod.namespace=$(NAMESPACE),pod.name=$(POD)
          env:
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: POD
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          image: ${JAEGER_AGENT_IMAGE}:${JAEGER_AGENT_IMAGE_TAG}
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /
              port: 14271
              scheme: HTTP
          name: jaeger-agent
          ports:
          - containerPort: 5778
            name: configs
          - containerPort: 6831
            name: jaeger-thrift
          - containerPort: 14271
            name: metrics
          resources:
            limits:
              cpu: 128m
              memory: 128Mi
            requests:
              cpu: 32m
              memory: 64Mi
        serviceAccountName: prometheus-telemeter
        terminationGracePeriodSeconds: 120
        volumes:
        - name: query-tls
          secret:
            secretName: query-tls
        - name: query-proxy
          secret:
            secretName: query-proxy
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app.kubernetes.io/component: query-cache
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-query-frontend
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
    name: observatorium-thanos-query-frontend
  spec:
    replicas: ${{THANOS_QUERY_FRONTEND_REPLICAS}}
    selector:
      matchLabels:
        app.kubernetes.io/component: query-cache
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: thanos-query-frontend
        app.kubernetes.io/part-of: observatorium
    template:
      metadata:
        labels:
          app.kubernetes.io/component: query-cache
          app.kubernetes.io/instance: observatorium
          app.kubernetes.io/name: thanos-query-frontend
          app.kubernetes.io/part-of: observatorium
          app.kubernetes.io/tracing: jaeger-agent
          app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: app.kubernetes.io/name
                    operator: In
                    values:
                    - thanos-query-frontend
                namespaces:
                - ${NAMESPACE}
                topologyKey: kubernetes.io/hostname
              weight: 100
        containers:
        - args:
          - query-frontend
          - --log.level=info
          - --log.format=logfmt
          - --query-frontend.compress-responses
          - --http-address=0.0.0.0:9090
          - --query-frontend.downstream-url=http://observatorium-thanos-query.${NAMESPACE}.svc.cluster.local.:9090
          - --query-frontend.log-queries-longer-than=${THANOS_QUERY_FRONTEND_LOG_QUERIES_LONGER_THAN}
          - |-
            --query-range.response-cache-config="config":
              "max_size": "0"
              "max_size_items": 2048
              "validity": "6h"
            "type": "in-memory"
          - |-
            --tracing.config="config":
              "sampler_param": 2
              "sampler_type": "ratelimiting"
              "service_name": "thanos-query-frontend"
            "type": "JAEGER"
          - --query-range.split-interval=${THANOS_QUERY_FRONTEND_SPLIT_INTERVAL}
          - --labels.split-interval=${THANOS_QUERY_FRONTEND_SPLIT_INTERVAL}
          - --query-range.max-retries-per-request=${THANOS_QUERY_FRONTEND_MAX_RETRIES}
          - --labels.max-retries-per-request=${THANOS_QUERY_FRONTEND_MAX_RETRIES}
          - --labels.default-time-range=336h
          - |-
            --labels.response-cache-config="config":
              "max_size": "0"
              "max_size_items": 2048
              "validity": "6h"
            "type": "in-memory"
          - --cache-compression-type=snappy
          image: ${THANOS_IMAGE}:${THANOS_IMAGE_TAG}
          livenessProbe:
            failureThreshold: 4
            httpGet:
              path: /-/healthy
              port: 9090
              scheme: HTTP
            periodSeconds: 30
          name: thanos-query-frontend
          ports:
          - containerPort: 9090
            name: http
          readinessProbe:
            failureThreshold: 20
            httpGet:
              path: /-/ready
              port: 9090
              scheme: HTTP
            periodSeconds: 5
          resources:
            limits:
              cpu: ${THANOS_QUERY_FRONTEND_CPU_LIMIT}
              memory: ${THANOS_QUERY_FRONTEND_MEMORY_LIMIT}
            requests:
              cpu: ${THANOS_QUERY_FRONTEND_CPU_REQUEST}
              memory: ${THANOS_QUERY_FRONTEND_MEMORY_REQUEST}
          terminationMessagePolicy: FallbackToLogsOnError
        - args:
          - -provider=openshift
          - -https-address=:9091
          - -http-address=
          - -email-domain=*
          - -upstream=http://localhost:9090
          - -openshift-service-account=prometheus-telemeter
          - '-openshift-sar={"resource": "namespaces", "verb": "get", "name": "${NAMESPACE}", "namespace": "${NAMESPACE}"}'
          - '-openshift-delegate-urls={"/": {"resource": "namespaces", "verb": "get", "name": "${NAMESPACE}", "namespace": "${NAMESPACE}"}}'
          - -tls-cert=/etc/tls/private/tls.crt
          - -tls-key=/etc/tls/private/tls.key
          - -client-secret-file=/var/run/secrets/kubernetes.io/serviceaccount/token
          - -cookie-secret-file=/etc/proxy/secrets/session_secret
          - -openshift-ca=/etc/pki/tls/cert.pem
          - -openshift-ca=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          image: ${PROXY_IMAGE}:${PROXY_IMAGE_TAG}
          name: oauth-proxy
          ports:
          - containerPort: 9091
            name: https
          resources:
            limits:
              cpu: ${OAUTH_PROXY_CPU_LIMITS}
              memory: ${OAUTH_PROXY_MEMORY_LIMITS}
            requests:
              cpu: ${OAUTH_PROXY_CPU_REQUEST}
              memory: ${OAUTH_PROXY_MEMORY_REQUEST}
          volumeMounts:
          - mountPath: /etc/tls/private
            name: query-frontend-tls
            readOnly: false
          - mountPath: /etc/proxy/secrets
            name: query-frontend-proxy
            readOnly: false
        - args:
          - --reporter.grpc.host-port=dns:///jaeger-collector-headless.$(NAMESPACE).svc:14250
          - --reporter.type=grpc
          - --jaeger.tags=pod.namespace=$(NAMESPACE),pod.name=$(POD)
          env:
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: POD
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          image: ${JAEGER_AGENT_IMAGE}:${JAEGER_AGENT_IMAGE_TAG}
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /
              port: 14271
              scheme: HTTP
          name: jaeger-agent
          ports:
          - containerPort: 5778
            name: configs
          - containerPort: 6831
            name: jaeger-thrift
          - containerPort: 14271
            name: metrics
          resources:
            limits:
              cpu: 128m
              memory: 128Mi
            requests:
              cpu: 32m
              memory: 64Mi
        serviceAccountName: prometheus-telemeter
        terminationGracePeriodSeconds: 120
        volumes:
        - name: query-frontend-tls
          secret:
            secretName: query-frontend-tls
        - name: query-frontend-proxy
          secret:
            secretName: query-frontend-proxy
- apiVersion: v1
  data:
    session_secret: ""
  kind: Secret
  metadata:
    labels:
      app.kubernetes.io/component: query-cache
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-query-frontend
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
    name: query-frontend-proxy
  type: Opaque
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      service.alpha.openshift.io/serving-cert-secret-name: query-frontend-tls
    labels:
      app.kubernetes.io/component: query-cache
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-query-frontend
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
    name: observatorium-thanos-query-frontend
  spec:
    ports:
    - name: http
      port: 9090
      targetPort: 9090
    - name: https
      port: 9091
      targetPort: 9091
    selector:
      app.kubernetes.io/component: query-cache
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-query-frontend
      app.kubernetes.io/part-of: observatorium
- apiVersion: monitoring.coreos.com/v1
  kind: ServiceMonitor
  metadata:
    labels:
      app.kubernetes.io/component: query-cache
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-query-frontend
      app.kubernetes.io/part-of: observatorium
      prometheus: app-sre
    name: observatorium-thanos-query-frontend
  spec:
    endpoints:
    - port: http
      relabelings:
      - separator: /
        sourceLabels:
        - namespace
        - pod
        targetLabel: instance
    namespaceSelector:
      matchNames:
      - ${NAMESPACE}
    selector:
      matchLabels:
        app.kubernetes.io/component: query-cache
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: thanos-query-frontend
        app.kubernetes.io/part-of: observatorium
- apiVersion: v1
  data:
    session_secret: ""
  kind: Secret
  metadata:
    labels:
      app.kubernetes.io/component: query-layer
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-query
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
    name: query-proxy
  type: Opaque
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      service.alpha.openshift.io/serving-cert-secret-name: query-tls
    labels:
      app.kubernetes.io/component: query-layer
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-query
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
    name: observatorium-thanos-query
  spec:
    ports:
    - name: grpc
      port: 10901
      targetPort: 10901
    - name: http
      port: 9090
      targetPort: 9090
    - name: https
      port: 9091
      targetPort: 9091
    selector:
      app.kubernetes.io/component: query-layer
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-query
      app.kubernetes.io/part-of: observatorium
- apiVersion: monitoring.coreos.com/v1
  kind: ServiceMonitor
  metadata:
    labels:
      app.kubernetes.io/component: query-layer
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-query
      app.kubernetes.io/part-of: observatorium
      prometheus: app-sre
    name: observatorium-thanos-query
  spec:
    endpoints:
    - port: http
      relabelings:
      - separator: /
        sourceLabels:
        - namespace
        - pod
        targetLabel: instance
    namespaceSelector:
      matchNames:
      - ${NAMESPACE}
    selector:
      matchLabels:
        app.kubernetes.io/component: query-layer
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: thanos-query
        app.kubernetes.io/part-of: observatorium
- apiVersion: v1
  data:
    hashrings.json: |-
      [
        {
          "hashring": "default",
          "tenants": [

          ]
        }
      ]
  kind: ConfigMap
  metadata:
    labels:
      app.kubernetes.io/component: kubernetes-controller
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-receive-controller
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_RECEIVE_CONTROLLER_IMAGE_TAG}
    name: observatorium-thanos-receive-controller-tenants
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app.kubernetes.io/component: kubernetes-controller
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-receive-controller
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_RECEIVE_CONTROLLER_IMAGE_TAG}
    name: observatorium-thanos-receive-controller
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/component: kubernetes-controller
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: thanos-receive-controller
        app.kubernetes.io/part-of: observatorium
    template:
      metadata:
        labels:
          app.kubernetes.io/component: kubernetes-controller
          app.kubernetes.io/instance: observatorium
          app.kubernetes.io/name: thanos-receive-controller
          app.kubernetes.io/part-of: observatorium
          app.kubernetes.io/version: ${THANOS_RECEIVE_CONTROLLER_IMAGE_TAG}
      spec:
        containers:
        - args:
          - --configmap-name=observatorium-thanos-receive-controller-tenants
          - --configmap-generated-name=observatorium-thanos-receive-controller-tenants-generated
          - --file-name=hashrings.json
          - --namespace=$(NAMESPACE)
          env:
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          image: ${THANOS_RECEIVE_CONTROLLER_IMAGE}:${THANOS_RECEIVE_CONTROLLER_IMAGE_TAG}
          name: thanos-receive-controller
          ports:
          - containerPort: 8080
            name: http
          resources:
            limits:
              cpu: 64m
              memory: 128Mi
            requests:
              cpu: 10m
              memory: 24Mi
        serviceAccount: observatorium-thanos-receive-controller
- apiVersion: rbac.authorization.k8s.io/v1
  kind: Role
  metadata:
    labels:
      app.kubernetes.io/component: kubernetes-controller
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-receive-controller
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_RECEIVE_CONTROLLER_IMAGE_TAG}
    name: observatorium-thanos-receive-controller
  rules:
  - apiGroups:
    - ""
    resources:
    - configmaps
    verbs:
    - list
    - watch
    - get
    - create
    - update
  - apiGroups:
    - apps
    resources:
    - statefulsets
    verbs:
    - list
    - watch
    - get
- apiVersion: rbac.authorization.k8s.io/v1
  kind: RoleBinding
  metadata:
    labels:
      app.kubernetes.io/component: kubernetes-controller
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-receive-controller
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_RECEIVE_CONTROLLER_IMAGE_TAG}
    name: observatorium-thanos-receive-controller
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: Role
    name: observatorium-thanos-receive-controller
  subjects:
  - kind: ServiceAccount
    name: observatorium-thanos-receive-controller
    namespace: ${NAMESPACE}
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app.kubernetes.io/component: kubernetes-controller
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-receive-controller
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_RECEIVE_CONTROLLER_IMAGE_TAG}
    name: observatorium-thanos-receive-controller
  spec:
    ports:
    - name: http
      port: 8080
      targetPort: 8080
    selector:
      app.kubernetes.io/component: kubernetes-controller
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-receive-controller
      app.kubernetes.io/part-of: observatorium
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    labels:
      app.kubernetes.io/component: kubernetes-controller
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-receive-controller
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_RECEIVE_CONTROLLER_IMAGE_TAG}
    name: observatorium-thanos-receive-controller
- apiVersion: monitoring.coreos.com/v1
  kind: ServiceMonitor
  metadata:
    labels:
      prometheus: app-sre
    name: observatorium-thanos-receive-controller
  spec:
    endpoints:
    - port: http
    namespaceSelector:
      matchNames:
      - ${NAMESPACE}
    selector:
      matchLabels:
        app.kubernetes.io/component: kubernetes-controller
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: thanos-receive-controller
        app.kubernetes.io/part-of: observatorium
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app.kubernetes.io/component: database-write-hashring
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-receive
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
      controller.receive.thanos.io/hashring: default
    name: observatorium-thanos-receive-default
  spec:
    clusterIP: None
    ports:
    - name: grpc
      port: 10901
      targetPort: 10901
    - name: http
      port: 10902
      targetPort: 10902
    - name: remote-write
      port: 19291
      targetPort: 19291
    selector:
      app.kubernetes.io/component: database-write-hashring
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-receive
      app.kubernetes.io/part-of: observatorium
      controller.receive.thanos.io/hashring: default
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    labels:
      app.kubernetes.io/component: database-write-hashring
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-receive
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
      controller.receive.thanos.io: thanos-receive-controller
      controller.receive.thanos.io/hashring: default
    name: observatorium-thanos-receive-default
  spec:
    replicas: ${{THANOS_RECEIVE_REPLICAS}}
    selector:
      matchLabels:
        app.kubernetes.io/component: database-write-hashring
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: thanos-receive
        app.kubernetes.io/part-of: observatorium
        controller.receive.thanos.io/hashring: default
    serviceName: observatorium-thanos-receive-default
    template:
      metadata:
        labels:
          app.kubernetes.io/component: database-write-hashring
          app.kubernetes.io/instance: observatorium
          app.kubernetes.io/name: thanos-receive
          app.kubernetes.io/part-of: observatorium
          app.kubernetes.io/tracing: jaeger-agent
          app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
          controller.receive.thanos.io/hashring: default
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: app.kubernetes.io/name
                    operator: In
                    values:
                    - thanos-receive
                  - key: app.kubernetes.io/instance
                    operator: In
                    values:
                    - observatorium
                namespaces:
                - ${NAMESPACE}
                topologyKey: kubernetes.io/hostname
              weight: 100
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: app.kubernetes.io/name
                    operator: In
                    values:
                    - thanos-receive
                  - key: app.kubernetes.io/instance
                    operator: In
                    values:
                    - observatorium
                namespaces:
                - ${NAMESPACE}
                topologyKey: topology.kubernetes.io/zone
              weight: 100
        containers:
        - args:
          - receive
          - --log.level=${THANOS_RECEIVE_LOG_LEVEL}
          - --log.format=logfmt
          - --grpc-address=0.0.0.0:10901
          - --http-address=0.0.0.0:10902
          - --remote-write.address=0.0.0.0:19291
          - --receive.replication-factor=3
          - --objstore.config=$(OBJSTORE_CONFIG)
          - --tsdb.path=${THANOS_RECEIVE_TSDB_PATH}
          - --label=replica="$(NAME)"
          - --label=receive="true"
          - --tsdb.retention=4d
          - --receive.local-endpoint=$(NAME).observatorium-thanos-receive-default.$(NAMESPACE).svc.cluster.local:10901
          - --receive.hashrings-file=/var/lib/thanos-receive/hashrings.json
          - |-
            --tracing.config="config":
              "sampler_param": 2
              "sampler_type": "ratelimiting"
              "service_name": "thanos-receive"
            "type": "JAEGER"
          - --receive.default-tenant-id=FB870BF3-9F3A-44FF-9BF7-D7A047A52F43
          env:
          - name: NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: OBJSTORE_CONFIG
            valueFrom:
              secretKeyRef:
                key: thanos.yaml
                name: ${THANOS_CONFIG_SECRET}
          - name: DEBUG
            value: ${THANOS_RECEIVE_DEBUG_ENV}
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                key: aws_access_key_id
                name: ${THANOS_S3_SECRET}
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                key: aws_secret_access_key
                name: ${THANOS_S3_SECRET}
          - name: DEBUG
            value: ${THANOS_RECEIVE_DEBUG_ENV}
          image: ${THANOS_IMAGE}:${THANOS_IMAGE_TAG}
          livenessProbe:
            failureThreshold: 8
            httpGet:
              path: /-/healthy
              port: 10902
              scheme: HTTP
            periodSeconds: 30
          name: thanos-receive
          ports:
          - containerPort: 10901
            name: grpc
          - containerPort: 10902
            name: http
          - containerPort: 19291
            name: remote-write
          readinessProbe:
            failureThreshold: 20
            httpGet:
              path: /-/ready
              port: 10902
              scheme: HTTP
            periodSeconds: 5
          resources:
            limits:
              cpu: ${THANOS_RECEIVE_CPU_LIMIT}
              memory: ${THANOS_RECEIVE_MEMORY_LIMIT}
            requests:
              cpu: ${THANOS_RECEIVE_CPU_REQUEST}
              memory: ${THANOS_RECEIVE_MEMORY_REQUEST}
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /var/thanos/receive
            name: data
            readOnly: false
          - mountPath: /var/lib/thanos-receive
            name: hashring-config
        - args:
          - --reporter.grpc.host-port=dns:///jaeger-collector-headless.$(NAMESPACE).svc:14250
          - --reporter.type=grpc
          - --jaeger.tags=pod.namespace=$(NAMESPACE),pod.name=$(POD)
          env:
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: POD
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          image: ${JAEGER_AGENT_IMAGE}:${JAEGER_AGENT_IMAGE_TAG}
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /
              port: 14271
              scheme: HTTP
          name: jaeger-agent
          ports:
          - containerPort: 5778
            name: configs
          - containerPort: 6831
            name: jaeger-thrift
          - containerPort: 14271
            name: metrics
          resources:
            limits:
              cpu: 128m
              memory: 128Mi
            requests:
              cpu: 32m
              memory: 64Mi
        terminationGracePeriodSeconds: 900
        volumes:
        - configMap:
            name: observatorium-thanos-receive-controller-tenants-generated
          name: hashring-config
    volumeClaimTemplates:
    - metadata:
        labels:
          app.kubernetes.io/component: database-write-hashring
          app.kubernetes.io/instance: observatorium
          app.kubernetes.io/name: thanos-receive
          app.kubernetes.io/part-of: observatorium
          controller.receive.thanos.io/hashring: default
        name: data
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 50Gi
        storageClassName: ${STORAGE_CLASS}
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-receive
      app.kubernetes.io/part-of: observatorium
    name: observatorium-thanos-receive
  spec:
    ports:
    - name: grpc
      port: 10901
      targetPort: 10901
    - name: http
      port: 10902
      targetPort: 10902
    - name: remote-write
      port: 19291
      targetPort: 19291
    selector:
      app.kubernetes.io/name: thanos-receive
- apiVersion: v1
  data:
    observatorium.yaml: |-
      "groups":
      - "interval": "3m"
        "name": "observatorium.rules"
        "rules":
        - "expr": |
            count by (name,reason) (cluster_operator_conditions{condition="Degraded"} == 1)
          "record": "name_reason:cluster_operator_degraded:count"
        - "expr": |
            count by (name,reason) (cluster_operator_conditions{condition="Available"} == 0)
          "record": "name_reason:cluster_operator_unavailable:count"
        - "expr": |
            sort_desc(max by (_id,code) (code:apiserver_request_count:rate:sum{code=~"(4|5)\\d\\d"}) > 0.5)
          "record": "id_code:apiserver_request_error_rate_sum:max"
        - "expr": |
            bottomk by (_id) (1, max by (_id, version) (0 * cluster_version{type="failure"}) or max by (_id, version) (1 + 0 * cluster_version{type="current"}))
          "record": "id_version:cluster_available"
        - "expr": |
            topk by (_id) (1, max by (_id, managed, ebs_account, internal) (label_replace(label_replace((subscription_labels{support=~"Standard|Premium|Layered"} * 0 + 1) or subscription_labels * 0, "internal", "true", "email_domain", "redhat.com|(.*\\.|^)ibm.com"), "managed", "", "managed", "false")) + on(_id) group_left(version) (topk by (_id) (1, id_version*0)) + on(_id) group_left(install_type) (topk by (_id) (1, id_install_type*0)) + on(_id) group_left(host_type) (topk by (_id) (1, id_primary_host_type*0)) + on(_id) group_left(provider) (topk by (_id) (1, id_provider*0)))
          "record": "id_version_ebs_account_internal:cluster_subscribed"
        - "expr": |
            0 * (max by (_id,host_type) (topk by (_id) (1, label_replace(label_replace(label_replace(label_replace(label_replace(label_replace(cluster:virt_platform_nodes:sum, "host_type", "$1", "type", "(aws|ibm_.*|ovirt|none|rhev|gcp|openstack|hyperv|vmware)"), "host_type", "virt-unknown", "host_type", ""), "host_type", "kvm-unknown", "type", "kvm"), "host_type", "xen-unknown", "type", "xen.*"), "host_type", "metal", "host_type", "none"), "host_type", "ibm-$1", "host_type", "ibm[_-](power|systemz).*"))) or on(_id) label_replace(max by (_id) (cluster_version{type="current"}), "host_type", "", "host_type", ""))
          "record": "id_primary_host_type"
        - "expr": |
            0 * topk by (_id) (1, count by (_id, provider) (label_replace(cluster_infrastructure_provider * 0 + 2, "provider", "$1", "type", "(.*)")) or on(_id) label_replace(max by (_id) (cluster_version{type="current"}*0+1), "provider", "", "provider", "") or on(_id) label_replace(max by (_id) (cluster:node_instance_type_count:sum*0), "provider", "hypershift-unknown", "provider", ""))
          "record": "id_provider"
        - "expr": |
            0 * (max by (_id,version) (topk by (_id) (1, cluster_version{type="current"})) or on(_id) label_replace(max by (_id) (cluster:node_instance_type_count:sum*0), "version", "", "unknown", ""))
          "record": "id_version"
        - "expr": |
            0 * (count by (_id, install_type) (label_replace(label_replace(label_replace(label_replace(topk by (_id) (1, cluster_installer), "install_type", "upi", "type", "other"), "install_type", "ipi", "type", "openshift-install"), "install_type", "hive", "invoker", "hive"), "install_type", "assisted-installer", "invoker", "assisted-installer")) or on(_id) (label_replace(count by (_id) (cluster:virt_platform_nodes:sum), "install_type", "hypershift-unknown", "install_type", ""))*0)
          "record": "id_install_type"
        - "expr": |
            0 * (max by (_id,cloudpak_type) (topk by (_id) (1, count by (_id,cloudpak_type) (label_replace(subscription_sync_total{installed=~"ibm-((licensing|common-service)-operator).*"}, "cloudpak_type", "unknown", "", ".*")))))
          "record": "id_cloudpak_type"
  kind: ConfigMap
  metadata:
    annotations:
      qontract.recycle: "true"
    labels:
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/part-of: observatorium
    name: observatorium-rule
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app.kubernetes.io/component: rule-evaluation-engine
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-rule
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
    name: observatorium-thanos-rule
  spec:
    clusterIP: None
    ports:
    - name: grpc
      port: 10901
      targetPort: 10901
    - name: http
      port: 10902
      targetPort: 10902
    selector:
      app.kubernetes.io/component: rule-evaluation-engine
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-rule
      app.kubernetes.io/part-of: observatorium
- apiVersion: monitoring.coreos.com/v1
  kind: ServiceMonitor
  metadata:
    labels:
      app.kubernetes.io/component: rule-evaluation-engine
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-rule
      app.kubernetes.io/part-of: observatorium
      prometheus: app-sre
    name: observatorium-thanos-rule
  spec:
    endpoints:
    - port: http
      relabelings:
      - separator: /
        sourceLabels:
        - namespace
        - pod
        targetLabel: instance
    namespaceSelector:
      matchNames:
      - ${NAMESPACE}
    selector:
      matchLabels:
        app.kubernetes.io/component: rule-evaluation-engine
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: thanos-rule
        app.kubernetes.io/part-of: observatorium
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    labels:
      app.kubernetes.io/component: rule-evaluation-engine
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-rule
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
    name: observatorium-thanos-rule
  spec:
    replicas: ${{THANOS_RULER_REPLICAS}}
    selector:
      matchLabels:
        app.kubernetes.io/component: rule-evaluation-engine
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: thanos-rule
        app.kubernetes.io/part-of: observatorium
    serviceName: observatorium-thanos-rule
    template:
      metadata:
        labels:
          app.kubernetes.io/component: rule-evaluation-engine
          app.kubernetes.io/instance: observatorium
          app.kubernetes.io/name: thanos-rule
          app.kubernetes.io/part-of: observatorium
          app.kubernetes.io/tracing: jaeger-agent
          app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
      spec:
        containers:
        - args:
          - rule
          - --log.level=${THANOS_RULER_LOG_LEVEL}
          - --log.format=logfmt
          - --grpc-address=0.0.0.0:10901
          - --http-address=0.0.0.0:10902
          - --objstore.config=$(OBJSTORE_CONFIG)
          - --data-dir=/var/thanos/rule
          - --label=rule_replica="$(NAME)"
          - --alert.label-drop=rule_replica
          - --query=dnssrv+_http._tcp.observatorium-thanos-query.${NAMESPACE}.svc.cluster.local
          - --rule-file=/etc/thanos/rules/observatorium.rules/foo
          - |-
            --tracing.config="config":
              "sampler_param": 2
              "sampler_type": "ratelimiting"
              "service_name": "thanos-rule"
            "type": "JAEGER"
          env:
          - name: NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: OBJSTORE_CONFIG
            valueFrom:
              secretKeyRef:
                key: thanos.yaml
                name: ${THANOS_CONFIG_SECRET}
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                key: aws_access_key_id
                name: ${THANOS_S3_SECRET}
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                key: aws_secret_access_key
                name: ${THANOS_S3_SECRET}
          image: ${THANOS_IMAGE}:${THANOS_IMAGE_TAG}
          livenessProbe:
            failureThreshold: 24
            httpGet:
              path: /-/healthy
              port: 10902
              scheme: HTTP
            periodSeconds: 5
          name: thanos-rule
          ports:
          - containerPort: 10901
            name: grpc
          - containerPort: 10902
            name: http
          readinessProbe:
            failureThreshold: 18
            httpGet:
              path: /-/ready
              port: 10902
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 5
          resources:
            limits:
              cpu: ${THANOS_RULER_CPU_LIMIT}
              memory: ${THANOS_RULER_MEMORY_LIMIT}
            requests:
              cpu: ${THANOS_RULER_CPU_REQUEST}
              memory: ${THANOS_RULER_MEMORY_REQUEST}
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /var/thanos/rule
            name: data
            readOnly: false
          - mountPath: /etc/thanos/rules/observatorium.rules
            name: observatorium.rules
        - args:
          - --reporter.grpc.host-port=dns:///jaeger-collector-headless.$(NAMESPACE).svc:14250
          - --reporter.type=grpc
          - --jaeger.tags=pod.namespace=$(NAMESPACE),pod.name=$(POD)
          env:
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: POD
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          image: ${JAEGER_AGENT_IMAGE}:${JAEGER_AGENT_IMAGE_TAG}
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /
              port: 14271
              scheme: HTTP
          name: jaeger-agent
          ports:
          - containerPort: 5778
            name: configs
          - containerPort: 6831
            name: jaeger-thrift
          - containerPort: 14271
            name: metrics
          resources:
            limits:
              cpu: 128m
              memory: 128Mi
            requests:
              cpu: 32m
              memory: 64Mi
        volumes:
        - configMap:
            name: observatorium.rules
          name: observatorium.rules
    volumeClaimTemplates:
    - metadata:
        labels:
          app.kubernetes.io/component: rule-evaluation-engine
          app.kubernetes.io/instance: observatorium
          app.kubernetes.io/name: thanos-rule
          app.kubernetes.io/part-of: observatorium
        name: data
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: ${THANOS_RULER_PVC_REQUEST}
        storageClassName: ${STORAGE_CLASS}
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app.kubernetes.io/component: object-store-gateway
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-store
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
      store.observatorium.io/shard: shard-0
    name: observatorium-thanos-store-shard-0
  spec:
    clusterIP: None
    ports:
    - name: grpc
      port: 10901
      targetPort: 10901
    - name: http
      port: 10902
      targetPort: 10902
    selector:
      app.kubernetes.io/component: object-store-gateway
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-store
      app.kubernetes.io/part-of: observatorium
      store.observatorium.io/shard: shard-0
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    labels:
      app.kubernetes.io/component: object-store-gateway
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-store
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
      store.observatorium.io/shard: shard-0
    name: observatorium-thanos-store-shard-0
  spec:
    replicas: ${{THANOS_STORE_REPLICAS}}
    selector:
      matchLabels:
        app.kubernetes.io/component: object-store-gateway
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: thanos-store
        app.kubernetes.io/part-of: observatorium
        store.observatorium.io/shard: shard-0
    serviceName: observatorium-thanos-store-shard-0
    template:
      metadata:
        labels:
          app.kubernetes.io/component: object-store-gateway
          app.kubernetes.io/instance: observatorium
          app.kubernetes.io/name: thanos-store
          app.kubernetes.io/part-of: observatorium
          app.kubernetes.io/tracing: jaeger-agent
          app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
          store.observatorium.io/shard: shard-0
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: app.kubernetes.io/name
                    operator: In
                    values:
                    - thanos-store
                  - key: app.kubernetes.io/instance
                    operator: In
                    values:
                    - observatorium
                namespaces:
                - ${NAMESPACE}
                topologyKey: kubernetes.io/hostname
              weight: 100
        containers:
        - args:
          - store
          - --log.level=${THANOS_STORE_LOG_LEVEL}
          - --log.format=logfmt
          - --data-dir=/var/thanos/store
          - --grpc-address=0.0.0.0:10901
          - --http-address=0.0.0.0:10902
          - --objstore.config=$(OBJSTORE_CONFIG)
          - --ignore-deletion-marks-delay=24h
          - --experimental.enable-index-cache-postings-compression
          - |-
            --index-cache.config="config":
              "addresses":
              - "dnssrv+_client._tcp.observatorium-thanos-store-index-cache-memcached.${NAMESPACE}.svc"
              "dns_provider_update_interval": "10s"
              "max_async_buffer_size": 200000
              "max_async_concurrency": 200
              "max_get_multi_batch_size": 100
              "max_get_multi_concurrency": 1000
              "max_idle_connections": 1300
              "max_item_size": "5MiB"
              "timeout": "400ms"
            "type": "memcached"
          - |-
            --store.caching-bucket.config="blocks_iter_ttl": "5m"
            "chunk_object_attrs_ttl": "24h"
            "chunk_subrange_size": 16000
            "chunk_subrange_ttl": "24h"
            "config":
              "addresses":
              - "dnssrv+_client._tcp.observatorium-thanos-store-bucket-cache-memcached.${NAMESPACE}.svc"
              "dns_provider_update_interval": "10s"
              "max_async_buffer_size": 25000
              "max_async_concurrency": 50
              "max_get_multi_batch_size": 100
              "max_get_multi_concurrency": 1000
              "max_idle_connections": 1100
              "max_item_size": "1MiB"
              "timeout": "400ms"
            "max_chunks_get_range_requests": 3
            "metafile_content_ttl": "24h"
            "metafile_doesnt_exist_ttl": "15m"
            "metafile_exists_ttl": "2h"
            "metafile_max_size": "1MiB"
            "type": "memcached"
          - |-
            --tracing.config="config":
              "sampler_param": 2
              "sampler_type": "ratelimiting"
              "service_name": "thanos-store"
            "type": "JAEGER"
          - |
            --selector.relabel-config=
              - action: hashmod
                source_labels: ["__block_id"]
                target_label: shard
                modulus: 3
              - action: keep
                source_labels: ["shard"]
                regex: 0
          env:
          - name: OBJSTORE_CONFIG
            valueFrom:
              secretKeyRef:
                key: thanos.yaml
                name: ${THANOS_CONFIG_SECRET}
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                key: aws_access_key_id
                name: ${THANOS_S3_SECRET}
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                key: aws_secret_access_key
                name: ${THANOS_S3_SECRET}
          image: ${THANOS_IMAGE}:${THANOS_IMAGE_TAG}
          livenessProbe:
            failureThreshold: 8
            httpGet:
              path: /-/healthy
              port: 10902
              scheme: HTTP
            periodSeconds: 30
          name: thanos-store
          ports:
          - containerPort: 10901
            name: grpc
          - containerPort: 10902
            name: http
          readinessProbe:
            failureThreshold: 20
            httpGet:
              path: /-/ready
              port: 10902
              scheme: HTTP
            periodSeconds: 5
          resources:
            limits:
              cpu: ${THANOS_STORE_CPU_LIMIT}
              memory: ${THANOS_STORE_MEMORY_LIMIT}
            requests:
              cpu: ${THANOS_STORE_CPU_REQUEST}
              memory: ${THANOS_STORE_MEMORY_REQUEST}
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /var/thanos/store
            name: data
            readOnly: false
        - args:
          - --reporter.grpc.host-port=dns:///jaeger-collector-headless.$(NAMESPACE).svc:14250
          - --reporter.type=grpc
          - --jaeger.tags=pod.namespace=$(NAMESPACE),pod.name=$(POD)
          env:
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: POD
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          image: ${JAEGER_AGENT_IMAGE}:${JAEGER_AGENT_IMAGE_TAG}
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /
              port: 14271
              scheme: HTTP
          name: jaeger-agent
          ports:
          - containerPort: 5778
            name: configs
          - containerPort: 6831
            name: jaeger-thrift
          - containerPort: 14271
            name: metrics
          resources:
            limits:
              cpu: 128m
              memory: 128Mi
            requests:
              cpu: 32m
              memory: 64Mi
        terminationGracePeriodSeconds: 120
        volumes: []
    volumeClaimTemplates:
    - metadata:
        labels:
          app.kubernetes.io/component: object-store-gateway
          app.kubernetes.io/instance: observatorium
          app.kubernetes.io/name: thanos-store
          app.kubernetes.io/part-of: observatorium
          store.observatorium.io/shard: shard-0
        name: data
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 50Gi
        storageClassName: ${STORAGE_CLASS}
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app.kubernetes.io/component: object-store-gateway
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-store
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
      store.observatorium.io/shard: shard-1
    name: observatorium-thanos-store-shard-1
  spec:
    clusterIP: None
    ports:
    - name: grpc
      port: 10901
      targetPort: 10901
    - name: http
      port: 10902
      targetPort: 10902
    selector:
      app.kubernetes.io/component: object-store-gateway
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-store
      app.kubernetes.io/part-of: observatorium
      store.observatorium.io/shard: shard-1
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    labels:
      app.kubernetes.io/component: object-store-gateway
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-store
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
      store.observatorium.io/shard: shard-1
    name: observatorium-thanos-store-shard-1
  spec:
    replicas: ${{THANOS_STORE_REPLICAS}}
    selector:
      matchLabels:
        app.kubernetes.io/component: object-store-gateway
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: thanos-store
        app.kubernetes.io/part-of: observatorium
        store.observatorium.io/shard: shard-1
    serviceName: observatorium-thanos-store-shard-1
    template:
      metadata:
        labels:
          app.kubernetes.io/component: object-store-gateway
          app.kubernetes.io/instance: observatorium
          app.kubernetes.io/name: thanos-store
          app.kubernetes.io/part-of: observatorium
          app.kubernetes.io/tracing: jaeger-agent
          app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
          store.observatorium.io/shard: shard-1
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: app.kubernetes.io/name
                    operator: In
                    values:
                    - thanos-store
                  - key: app.kubernetes.io/instance
                    operator: In
                    values:
                    - observatorium
                namespaces:
                - ${NAMESPACE}
                topologyKey: kubernetes.io/hostname
              weight: 100
        containers:
        - args:
          - store
          - --log.level=${THANOS_STORE_LOG_LEVEL}
          - --log.format=logfmt
          - --data-dir=/var/thanos/store
          - --grpc-address=0.0.0.0:10901
          - --http-address=0.0.0.0:10902
          - --objstore.config=$(OBJSTORE_CONFIG)
          - --ignore-deletion-marks-delay=24h
          - --experimental.enable-index-cache-postings-compression
          - |-
            --index-cache.config="config":
              "addresses":
              - "dnssrv+_client._tcp.observatorium-thanos-store-index-cache-memcached.${NAMESPACE}.svc"
              "dns_provider_update_interval": "10s"
              "max_async_buffer_size": 200000
              "max_async_concurrency": 200
              "max_get_multi_batch_size": 100
              "max_get_multi_concurrency": 1000
              "max_idle_connections": 1300
              "max_item_size": "5MiB"
              "timeout": "400ms"
            "type": "memcached"
          - |-
            --store.caching-bucket.config="blocks_iter_ttl": "5m"
            "chunk_object_attrs_ttl": "24h"
            "chunk_subrange_size": 16000
            "chunk_subrange_ttl": "24h"
            "config":
              "addresses":
              - "dnssrv+_client._tcp.observatorium-thanos-store-bucket-cache-memcached.${NAMESPACE}.svc"
              "dns_provider_update_interval": "10s"
              "max_async_buffer_size": 25000
              "max_async_concurrency": 50
              "max_get_multi_batch_size": 100
              "max_get_multi_concurrency": 1000
              "max_idle_connections": 1100
              "max_item_size": "1MiB"
              "timeout": "400ms"
            "max_chunks_get_range_requests": 3
            "metafile_content_ttl": "24h"
            "metafile_doesnt_exist_ttl": "15m"
            "metafile_exists_ttl": "2h"
            "metafile_max_size": "1MiB"
            "type": "memcached"
          - |-
            --tracing.config="config":
              "sampler_param": 2
              "sampler_type": "ratelimiting"
              "service_name": "thanos-store"
            "type": "JAEGER"
          - |
            --selector.relabel-config=
              - action: hashmod
                source_labels: ["__block_id"]
                target_label: shard
                modulus: 3
              - action: keep
                source_labels: ["shard"]
                regex: 1
          env:
          - name: OBJSTORE_CONFIG
            valueFrom:
              secretKeyRef:
                key: thanos.yaml
                name: ${THANOS_CONFIG_SECRET}
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                key: aws_access_key_id
                name: ${THANOS_S3_SECRET}
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                key: aws_secret_access_key
                name: ${THANOS_S3_SECRET}
          image: ${THANOS_IMAGE}:${THANOS_IMAGE_TAG}
          livenessProbe:
            failureThreshold: 8
            httpGet:
              path: /-/healthy
              port: 10902
              scheme: HTTP
            periodSeconds: 30
          name: thanos-store
          ports:
          - containerPort: 10901
            name: grpc
          - containerPort: 10902
            name: http
          readinessProbe:
            failureThreshold: 20
            httpGet:
              path: /-/ready
              port: 10902
              scheme: HTTP
            periodSeconds: 5
          resources:
            limits:
              cpu: ${THANOS_STORE_CPU_LIMIT}
              memory: ${THANOS_STORE_MEMORY_LIMIT}
            requests:
              cpu: ${THANOS_STORE_CPU_REQUEST}
              memory: ${THANOS_STORE_MEMORY_REQUEST}
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /var/thanos/store
            name: data
            readOnly: false
        - args:
          - --reporter.grpc.host-port=dns:///jaeger-collector-headless.$(NAMESPACE).svc:14250
          - --reporter.type=grpc
          - --jaeger.tags=pod.namespace=$(NAMESPACE),pod.name=$(POD)
          env:
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: POD
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          image: ${JAEGER_AGENT_IMAGE}:${JAEGER_AGENT_IMAGE_TAG}
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /
              port: 14271
              scheme: HTTP
          name: jaeger-agent
          ports:
          - containerPort: 5778
            name: configs
          - containerPort: 6831
            name: jaeger-thrift
          - containerPort: 14271
            name: metrics
          resources:
            limits:
              cpu: 128m
              memory: 128Mi
            requests:
              cpu: 32m
              memory: 64Mi
        terminationGracePeriodSeconds: 120
        volumes: []
    volumeClaimTemplates:
    - metadata:
        labels:
          app.kubernetes.io/component: object-store-gateway
          app.kubernetes.io/instance: observatorium
          app.kubernetes.io/name: thanos-store
          app.kubernetes.io/part-of: observatorium
          store.observatorium.io/shard: shard-1
        name: data
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 50Gi
        storageClassName: ${STORAGE_CLASS}
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app.kubernetes.io/component: object-store-gateway
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-store
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
      store.observatorium.io/shard: shard-2
    name: observatorium-thanos-store-shard-2
  spec:
    clusterIP: None
    ports:
    - name: grpc
      port: 10901
      targetPort: 10901
    - name: http
      port: 10902
      targetPort: 10902
    selector:
      app.kubernetes.io/component: object-store-gateway
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-store
      app.kubernetes.io/part-of: observatorium
      store.observatorium.io/shard: shard-2
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    labels:
      app.kubernetes.io/component: object-store-gateway
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-store
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
      store.observatorium.io/shard: shard-2
    name: observatorium-thanos-store-shard-2
  spec:
    replicas: ${{THANOS_STORE_REPLICAS}}
    selector:
      matchLabels:
        app.kubernetes.io/component: object-store-gateway
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: thanos-store
        app.kubernetes.io/part-of: observatorium
        store.observatorium.io/shard: shard-2
    serviceName: observatorium-thanos-store-shard-2
    template:
      metadata:
        labels:
          app.kubernetes.io/component: object-store-gateway
          app.kubernetes.io/instance: observatorium
          app.kubernetes.io/name: thanos-store
          app.kubernetes.io/part-of: observatorium
          app.kubernetes.io/tracing: jaeger-agent
          app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
          store.observatorium.io/shard: shard-2
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: app.kubernetes.io/name
                    operator: In
                    values:
                    - thanos-store
                  - key: app.kubernetes.io/instance
                    operator: In
                    values:
                    - observatorium
                namespaces:
                - ${NAMESPACE}
                topologyKey: kubernetes.io/hostname
              weight: 100
        containers:
        - args:
          - store
          - --log.level=${THANOS_STORE_LOG_LEVEL}
          - --log.format=logfmt
          - --data-dir=/var/thanos/store
          - --grpc-address=0.0.0.0:10901
          - --http-address=0.0.0.0:10902
          - --objstore.config=$(OBJSTORE_CONFIG)
          - --ignore-deletion-marks-delay=24h
          - --experimental.enable-index-cache-postings-compression
          - |-
            --index-cache.config="config":
              "addresses":
              - "dnssrv+_client._tcp.observatorium-thanos-store-index-cache-memcached.${NAMESPACE}.svc"
              "dns_provider_update_interval": "10s"
              "max_async_buffer_size": 200000
              "max_async_concurrency": 200
              "max_get_multi_batch_size": 100
              "max_get_multi_concurrency": 1000
              "max_idle_connections": 1300
              "max_item_size": "5MiB"
              "timeout": "400ms"
            "type": "memcached"
          - |-
            --store.caching-bucket.config="blocks_iter_ttl": "5m"
            "chunk_object_attrs_ttl": "24h"
            "chunk_subrange_size": 16000
            "chunk_subrange_ttl": "24h"
            "config":
              "addresses":
              - "dnssrv+_client._tcp.observatorium-thanos-store-bucket-cache-memcached.${NAMESPACE}.svc"
              "dns_provider_update_interval": "10s"
              "max_async_buffer_size": 25000
              "max_async_concurrency": 50
              "max_get_multi_batch_size": 100
              "max_get_multi_concurrency": 1000
              "max_idle_connections": 1100
              "max_item_size": "1MiB"
              "timeout": "400ms"
            "max_chunks_get_range_requests": 3
            "metafile_content_ttl": "24h"
            "metafile_doesnt_exist_ttl": "15m"
            "metafile_exists_ttl": "2h"
            "metafile_max_size": "1MiB"
            "type": "memcached"
          - |-
            --tracing.config="config":
              "sampler_param": 2
              "sampler_type": "ratelimiting"
              "service_name": "thanos-store"
            "type": "JAEGER"
          - |
            --selector.relabel-config=
              - action: hashmod
                source_labels: ["__block_id"]
                target_label: shard
                modulus: 3
              - action: keep
                source_labels: ["shard"]
                regex: 2
          env:
          - name: OBJSTORE_CONFIG
            valueFrom:
              secretKeyRef:
                key: thanos.yaml
                name: ${THANOS_CONFIG_SECRET}
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                key: aws_access_key_id
                name: ${THANOS_S3_SECRET}
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                key: aws_secret_access_key
                name: ${THANOS_S3_SECRET}
          image: ${THANOS_IMAGE}:${THANOS_IMAGE_TAG}
          livenessProbe:
            failureThreshold: 8
            httpGet:
              path: /-/healthy
              port: 10902
              scheme: HTTP
            periodSeconds: 30
          name: thanos-store
          ports:
          - containerPort: 10901
            name: grpc
          - containerPort: 10902
            name: http
          readinessProbe:
            failureThreshold: 20
            httpGet:
              path: /-/ready
              port: 10902
              scheme: HTTP
            periodSeconds: 5
          resources:
            limits:
              cpu: ${THANOS_STORE_CPU_LIMIT}
              memory: ${THANOS_STORE_MEMORY_LIMIT}
            requests:
              cpu: ${THANOS_STORE_CPU_REQUEST}
              memory: ${THANOS_STORE_MEMORY_REQUEST}
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /var/thanos/store
            name: data
            readOnly: false
        - args:
          - --reporter.grpc.host-port=dns:///jaeger-collector-headless.$(NAMESPACE).svc:14250
          - --reporter.type=grpc
          - --jaeger.tags=pod.namespace=$(NAMESPACE),pod.name=$(POD)
          env:
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: POD
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          image: ${JAEGER_AGENT_IMAGE}:${JAEGER_AGENT_IMAGE_TAG}
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /
              port: 14271
              scheme: HTTP
          name: jaeger-agent
          ports:
          - containerPort: 5778
            name: configs
          - containerPort: 6831
            name: jaeger-thrift
          - containerPort: 14271
            name: metrics
          resources:
            limits:
              cpu: 128m
              memory: 128Mi
            requests:
              cpu: 32m
              memory: 64Mi
        terminationGracePeriodSeconds: 120
        volumes: []
    volumeClaimTemplates:
    - metadata:
        labels:
          app.kubernetes.io/component: object-store-gateway
          app.kubernetes.io/instance: observatorium
          app.kubernetes.io/name: thanos-store
          app.kubernetes.io/part-of: observatorium
          store.observatorium.io/shard: shard-2
        name: data
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 50Gi
        storageClassName: ${STORAGE_CLASS}
- apiVersion: monitoring.coreos.com/v1
  kind: ServiceMonitor
  metadata:
    labels:
      app.kubernetes.io/component: object-store-gateway
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-store
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
      prometheus: app-sre
    name: observatorium-thanos-store-shard
    namespace: ${NAMESPACE}
  spec:
    endpoints:
    - port: http
      relabelings:
      - separator: /
        sourceLabels:
        - namespace
        - pod
        targetLabel: instance
    namespaceSelector:
      matchNames:
      - ${NAMESPACE}
    selector:
      matchLabels:
        app.kubernetes.io/component: object-store-gateway
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: thanos-store
        app.kubernetes.io/part-of: observatorium
- apiVersion: monitoring.coreos.com/v1
  kind: ServiceMonitor
  metadata:
    labels:
      app.kubernetes.io/component: database-write-hashring
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-receive
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
      prometheus: app-sre
    name: observatorium-thanos-receive
    namespace: ${NAMESPACE}
  spec:
    endpoints:
    - port: http
      relabelings:
      - separator: /
        sourceLabels:
        - namespace
        - pod
        targetLabel: instance
    namespaceSelector:
      matchNames:
      - ${NAMESPACE}
    selector:
      matchLabels:
        app.kubernetes.io/component: database-write-hashring
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: thanos-receive
        app.kubernetes.io/part-of: observatorium
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app.kubernetes.io/component: store-index-cache
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: memcached
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${MEMCACHED_IMAGE_TAG}
    name: observatorium-thanos-store-index-cache-memcached
  spec:
    clusterIP: None
    ports:
    - name: client
      port: 11211
      targetPort: 11211
    - name: metrics
      port: 9150
      targetPort: 9150
    selector:
      app.kubernetes.io/component: store-index-cache
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: memcached
      app.kubernetes.io/part-of: observatorium
- apiVersion: monitoring.coreos.com/v1
  kind: ServiceMonitor
  metadata:
    labels:
      prometheus: app-sre
    name: observatorium-thanos-store-index-cache
  spec:
    endpoints:
    - port: metrics
    namespaceSelector:
      matchNames:
      - ${NAMESPACE}
    selector:
      matchLabels:
        app.kubernetes.io/component: store-index-cache
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: memcached
        app.kubernetes.io/part-of: observatorium
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    labels:
      app.kubernetes.io/component: store-index-cache
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: memcached
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${MEMCACHED_IMAGE_TAG}
    name: observatorium-thanos-store-index-cache-memcached
  spec:
    replicas: ${{THANOS_STORE_INDEX_CACHE_REPLICAS}}
    selector:
      matchLabels:
        app.kubernetes.io/component: store-index-cache
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: memcached
        app.kubernetes.io/part-of: observatorium
    serviceName: observatorium-thanos-store-index-cache-memcached
    template:
      metadata:
        labels:
          app.kubernetes.io/component: store-index-cache
          app.kubernetes.io/instance: observatorium
          app.kubernetes.io/name: memcached
          app.kubernetes.io/part-of: observatorium
          app.kubernetes.io/version: ${MEMCACHED_IMAGE_TAG}
      spec:
        containers:
        - args:
          - -m ${THANOS_STORE_INDEX_CACHE_MEMORY_LIMIT_MB}
          - -I 5m
          - -c ${THANOS_STORE_INDEX_CACHE_CONNECTION_LIMIT}
          - -v
          image: ${MEMCACHED_IMAGE}:${MEMCACHED_IMAGE_TAG}
          name: memcached
          ports:
          - containerPort: 11211
            name: client
          resources:
            limits:
              cpu: ${THANOS_STORE_INDEX_CACHE_MEMCACHED_CPU_LIMIT}
              memory: ${THANOS_STORE_INDEX_CACHE_MEMCACHED_MEMORY_LIMIT}
            requests:
              cpu: ${THANOS_STORE_INDEX_CACHE_MEMCACHED_CPU_REQUEST}
              memory: ${THANOS_STORE_INDEX_CACHE_MEMCACHED_MEMORY_REQUEST}
          terminationMessagePolicy: FallbackToLogsOnError
        - args:
          - --memcached.address=localhost:11211
          - --web.listen-address=0.0.0.0:9150
          image: ${MEMCACHED_EXPORTER_IMAGE}:${MEMCACHED_EXPORTER_IMAGE_TAG}
          name: exporter
          ports:
          - containerPort: 9150
            name: metrics
          resources:
            limits:
              cpu: ${MEMCACHED_EXPORTER_CPU_LIMIT}
              memory: ${MEMCACHED_EXPORTER_MEMORY_LIMIT}
            requests:
              cpu: ${MEMCACHED_EXPORTER_CPU_REQUEST}
              memory: ${MEMCACHED_EXPORTER_MEMORY_REQUEST}
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app.kubernetes.io/component: store-bucket-cache
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: memcached
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${MEMCACHED_IMAGE_TAG}
    name: observatorium-thanos-store-bucket-cache-memcached
  spec:
    clusterIP: None
    ports:
    - name: client
      port: 11211
      targetPort: 11211
    - name: metrics
      port: 9150
      targetPort: 9150
    selector:
      app.kubernetes.io/component: store-bucket-cache
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: memcached
      app.kubernetes.io/part-of: observatorium
- apiVersion: monitoring.coreos.com/v1
  kind: ServiceMonitor
  metadata:
    labels:
      prometheus: app-sre
    name: observatorium-thanos-store-bucket-cache
  spec:
    endpoints:
    - port: metrics
    namespaceSelector:
      matchNames:
      - ${NAMESPACE}
    selector:
      matchLabels:
        app.kubernetes.io/component: store-bucket-cache
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: memcached
        app.kubernetes.io/part-of: observatorium
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    labels:
      app.kubernetes.io/component: store-bucket-cache
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: memcached
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${MEMCACHED_IMAGE_TAG}
    name: observatorium-thanos-store-bucket-cache-memcached
  spec:
    replicas: ${{THANOS_STORE_BUCKET_CACHE_REPLICAS}}
    selector:
      matchLabels:
        app.kubernetes.io/component: store-bucket-cache
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: memcached
        app.kubernetes.io/part-of: observatorium
    serviceName: observatorium-thanos-store-bucket-cache-memcached
    template:
      metadata:
        labels:
          app.kubernetes.io/component: store-bucket-cache
          app.kubernetes.io/instance: observatorium
          app.kubernetes.io/name: memcached
          app.kubernetes.io/part-of: observatorium
          app.kubernetes.io/version: ${MEMCACHED_IMAGE_TAG}
      spec:
        containers:
        - args:
          - -m ${THANOS_STORE_BUCKET_CACHE_MEMORY_LIMIT_MB}
          - -I 1m
          - -c ${THANOS_STORE_BUCKET_CACHE_CONNECTION_LIMIT}
          - -v
          image: ${MEMCACHED_IMAGE}:${MEMCACHED_IMAGE_TAG}
          name: memcached
          ports:
          - containerPort: 11211
            name: client
          resources:
            limits:
              cpu: ${THANOS_STORE_BUCKET_CACHE_MEMCACHED_CPU_LIMIT}
              memory: ${THANOS_STORE_BUCKET_CACHE_MEMCACHED_MEMORY_LIMIT}
            requests:
              cpu: ${THANOS_STORE_BUCKET_CACHE_MEMCACHED_CPU_REQUEST}
              memory: ${THANOS_STORE_BUCKET_CACHE_MEMCACHED_MEMORY_REQUEST}
          terminationMessagePolicy: FallbackToLogsOnError
        - args:
          - --memcached.address=localhost:11211
          - --web.listen-address=0.0.0.0:9150
          image: ${MEMCACHED_EXPORTER_IMAGE}:${MEMCACHED_EXPORTER_IMAGE_TAG}
          name: exporter
          ports:
          - containerPort: 9150
            name: metrics
          resources:
            limits:
              cpu: ${MEMCACHED_EXPORTER_CPU_LIMIT}
              memory: ${MEMCACHED_EXPORTER_MEMORY_LIMIT}
            requests:
              cpu: ${MEMCACHED_EXPORTER_CPU_REQUEST}
              memory: ${MEMCACHED_EXPORTER_MEMORY_REQUEST}
- apiVersion: v1
  data:
    authorize_url: ""
    client_id: ""
    client_secret: ""
    oidc_issuer: ""
  kind: Secret
  metadata:
    labels:
      k8s-app: telemeter-server
    name: telemeter-server
  type: Opaque
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      service.alpha.openshift.io/serving-cert-secret-name: telemeter-server-shared
    labels:
      k8s-app: telemeter-server
    name: telemeter-server
  spec:
    clusterIP: None
    ports:
    - name: external
      port: 8443
      targetPort: external
    - name: internal
      port: 8081
      targetPort: internal
    selector:
      k8s-app: telemeter-server
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: telemeter-server
- apiVersion: monitoring.coreos.com/v1
  kind: ServiceMonitor
  metadata:
    labels:
      endpoint: metrics
      k8s-app: telemeter-server
      prometheus: app-sre
    name: telemeter-server
  spec:
    endpoints:
    - interval: 60s
      port: internal
      scheme: https
      tlsConfig:
        insecureSkipVerify: true
    jobLabel: k8s-app
    namespaceSelector:
      matchNames:
      - ${NAMESPACE}
    selector:
      matchLabels:
        k8s-app: telemeter-server
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    name: telemeter-server
  spec:
    podManagementPolicy: Parallel
    replicas: ${{REPLICAS}}
    selector:
      matchLabels:
        k8s-app: telemeter-server
    serviceName: telemeter-server
    template:
      metadata:
        labels:
          k8s-app: telemeter-server
      spec:
        containers:
        - command:
          - /usr/bin/telemeter-server
          - --listen=0.0.0.0:8443
          - --listen-internal=0.0.0.0:8081
          - --shared-key=/etc/pki/service/tls.key
          - --tls-key=/etc/pki/service/tls.key
          - --tls-crt=/etc/pki/service/tls.crt
          - --internal-tls-key=/etc/pki/service/tls.key
          - --internal-tls-crt=/etc/pki/service/tls.crt
          - --authorize=$(AUTHORIZE_URL)
          - --oidc-issuer=$(OIDC_ISSUER)
          - --client-id=$(CLIENT_ID)
          - --client-secret=$(CLIENT_SECRET)
          - --memcached=memcached-0.memcached.${NAMESPACE}.svc.cluster.local:11211
          - --whitelist={__name__="alerts",alertstate="firing"}
          - --whitelist={__name__="cam_app_workload_migrations"}
          - --whitelist={__name__="cco_credentials_mode"}
          - --whitelist={__name__="ceph_cluster_total_bytes"}
          - --whitelist={__name__="ceph_cluster_total_used_raw_bytes"}
          - --whitelist={__name__="ceph_health_status"}
          - --whitelist={__name__="che_workspace_failure_total"}
          - --whitelist={__name__="che_workspace_start_time_seconds_count"}
          - --whitelist={__name__="che_workspace_start_time_seconds_sum"}
          - --whitelist={__name__="che_workspace_started_total"}
          - --whitelist={__name__="che_workspace_status"}
          - --whitelist={__name__="cluster:apiserver_current_inflight_requests:sum:max_over_time:2m"}
          - --whitelist={__name__="cluster:capacity_cpu_cores:sum"}
          - --whitelist={__name__="cluster:capacity_memory_bytes:sum"}
          - --whitelist={__name__="cluster:cpu_usage_cores:sum"}
          - --whitelist={__name__="cluster:kube_persistentvolumeclaim_resource_requests_storage_bytes:provisioner:sum"}
          - --whitelist={__name__="cluster:kubelet_volume_stats_used_bytes:provisioner:sum"}
          - --whitelist={__name__="cluster:memory_usage_bytes:sum"}
          - --whitelist={__name__="cluster:network_attachment_definition_enabled_instance_up:max"}
          - --whitelist={__name__="cluster:network_attachment_definition_instances:max"}
          - --whitelist={__name__="cluster:node_instance_type_count:sum"}
          - --whitelist={__name__="cluster:telemetry_selected_series:count"}
          - --whitelist={__name__="cluster:virt_platform_nodes:sum"}
          - --whitelist={__name__="cluster_feature_set"}
          - --whitelist={__name__="cluster_infrastructure_provider"}
          - --whitelist={__name__="cluster_installer"}
          - --whitelist={__name__="cluster_legacy_scheduler_policy"}
          - --whitelist={__name__="cluster_master_schedulable"}
          - --whitelist={__name__="cluster_operator_conditions"}
          - --whitelist={__name__="cluster_operator_up"}
          - --whitelist={__name__="cluster_version"}
          - --whitelist={__name__="cluster_version_available_updates"}
          - --whitelist={__name__="cluster_version_payload"}
          - --whitelist={__name__="cnv:vmi_status_running:count"}
          - --whitelist={__name__="code:apiserver_request_count:rate:sum"}
          - --whitelist={__name__="code:apiserver_request_total:rate:sum"}
          - --whitelist={__name__="console_url"}
          - --whitelist={__name__="count:up0"}
          - --whitelist={__name__="count:up1"}
          - --whitelist={__name__="csv_abnormal"}
          - --whitelist={__name__="csv_succeeded"}
          - --whitelist={__name__="insightsclient_request_send_total"}
          - --whitelist={__name__="instance:etcd_object_counts:sum"}
          - --whitelist={__name__="job:ceph_osd_metadata:count"}
          - --whitelist={__name__="job:ceph_pools_iops:total"}
          - --whitelist={__name__="job:ceph_pools_iops_bytes:total"}
          - --whitelist={__name__="job:ceph_versions_running:count"}
          - --whitelist={__name__="job:kube_pv:count"}
          - --whitelist={__name__="job:noobaa_bucket_count:sum"}
          - --whitelist={__name__="job:noobaa_total_object_count:sum"}
          - --whitelist={__name__="job:noobaa_total_unhealthy_buckets:sum"}
          - --whitelist={__name__="monitoring:container_memory_working_set_bytes:sum"}
          - --whitelist={__name__="monitoring:haproxy_server_http_responses_total:sum"}
          - --whitelist={__name__="node_role_os_version_machine:cpu_capacity_cores:sum"}
          - --whitelist={__name__="node_role_os_version_machine:cpu_capacity_sockets:sum"}
          - --whitelist={__name__="node_uname_info"}
          - --whitelist={__name__="noobaa_accounts_num"}
          - --whitelist={__name__="noobaa_total_usage"}
          - --whitelist={__name__="olm_resolution_duration_seconds"}
          - --whitelist={__name__="openshift:cpu_usage_cores:sum"}
          - --whitelist={__name__="openshift:memory_usage_bytes:sum"}
          - --whitelist={__name__="openshift:prometheus_tsdb_head_samples_appended_total:sum"}
          - --whitelist={__name__="openshift:prometheus_tsdb_head_series:sum"}
          - --whitelist={__name__="rhmi_status"}
          - --whitelist={__name__="subscription_sync_total"}
          - --whitelist={__name__="up"}
          - --whitelist={__name__="workload:cpu_usage_cores:sum"}
          - --whitelist={__name__="workload:memory_usage_bytes:sum"}
          - --whitelist={__name__=~"cluster:usage:.*"}
          - --elide-label=prometheus_replica
          - --log-level=${TELEMETER_LOG_LEVEL}
          - --token-expire-seconds=${TELEMETER_SERVER_TOKEN_EXPIRE_SECONDS}
          - --limit-bytes=5242880
          - --forward-url=${TELEMETER_FORWARD_URL}
          env:
          - name: AUTHORIZE_URL
            valueFrom:
              secretKeyRef:
                key: authorize_url
                name: telemeter-server
          - name: OIDC_ISSUER
            valueFrom:
              secretKeyRef:
                key: oidc_issuer
                name: telemeter-server
          - name: CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                key: client_secret
                name: telemeter-server
          - name: CLIENT_ID
            valueFrom:
              secretKeyRef:
                key: client_id
                name: telemeter-server
          image: ${IMAGE}:${IMAGE_TAG}
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8443
              scheme: HTTPS
          name: telemeter-server
          ports:
          - containerPort: 8443
            name: external
          - containerPort: 8081
            name: internal
          readinessProbe:
            httpGet:
              path: /healthz/ready
              port: 8443
              scheme: HTTPS
          resources:
            limits:
              cpu: ${TELEMETER_SERVER_CPU_LIMIT}
              memory: ${TELEMETER_SERVER_MEMORY_LIMIT}
            requests:
              cpu: ${TELEMETER_SERVER_CPU_REQUEST}
              memory: ${TELEMETER_SERVER_MEMORY_REQUEST}
          volumeMounts:
          - mountPath: /etc/pki/service
            name: telemeter-server-tls
            readOnly: false
        serviceAccountName: telemeter-server
        volumes:
        - name: secret-telemeter-server
          secret:
            secretName: telemeter-server
        - name: telemeter-server-tls
          secret:
            secretName: telemeter-server-shared
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    name: telemeter-server-canary
  spec:
    podManagementPolicy: Parallel
    replicas: ${{REPLICAS_CANARY}}
    selector:
      matchLabels:
        k8s-app: telemeter-server
        track: canary
    serviceName: telemeter-server
    template:
      metadata:
        labels:
          k8s-app: telemeter-server
          track: canary
      spec:
        containers:
        - command:
          - /usr/bin/telemeter-server
          - --listen=0.0.0.0:8443
          - --listen-internal=0.0.0.0:8081
          - --shared-key=/etc/pki/service/tls.key
          - --tls-key=/etc/pki/service/tls.key
          - --tls-crt=/etc/pki/service/tls.crt
          - --internal-tls-key=/etc/pki/service/tls.key
          - --internal-tls-crt=/etc/pki/service/tls.crt
          - --authorize=$(AUTHORIZE_URL)
          - --oidc-issuer=$(OIDC_ISSUER)
          - --client-id=$(CLIENT_ID)
          - --client-secret=$(CLIENT_SECRET)
          - --memcached=memcached-0.memcached.${NAMESPACE}.svc.cluster.local:11211
          - --whitelist={__name__="alerts",alertstate="firing"}
          - --whitelist={__name__="cam_app_workload_migrations"}
          - --whitelist={__name__="cco_credentials_mode"}
          - --whitelist={__name__="ceph_cluster_total_bytes"}
          - --whitelist={__name__="ceph_cluster_total_used_raw_bytes"}
          - --whitelist={__name__="ceph_health_status"}
          - --whitelist={__name__="che_workspace_failure_total"}
          - --whitelist={__name__="che_workspace_start_time_seconds_count"}
          - --whitelist={__name__="che_workspace_start_time_seconds_sum"}
          - --whitelist={__name__="che_workspace_started_total"}
          - --whitelist={__name__="che_workspace_status"}
          - --whitelist={__name__="cluster:apiserver_current_inflight_requests:sum:max_over_time:2m"}
          - --whitelist={__name__="cluster:capacity_cpu_cores:sum"}
          - --whitelist={__name__="cluster:capacity_memory_bytes:sum"}
          - --whitelist={__name__="cluster:cpu_usage_cores:sum"}
          - --whitelist={__name__="cluster:kube_persistentvolumeclaim_resource_requests_storage_bytes:provisioner:sum"}
          - --whitelist={__name__="cluster:kubelet_volume_stats_used_bytes:provisioner:sum"}
          - --whitelist={__name__="cluster:memory_usage_bytes:sum"}
          - --whitelist={__name__="cluster:network_attachment_definition_enabled_instance_up:max"}
          - --whitelist={__name__="cluster:network_attachment_definition_instances:max"}
          - --whitelist={__name__="cluster:node_instance_type_count:sum"}
          - --whitelist={__name__="cluster:telemetry_selected_series:count"}
          - --whitelist={__name__="cluster:virt_platform_nodes:sum"}
          - --whitelist={__name__="cluster_feature_set"}
          - --whitelist={__name__="cluster_infrastructure_provider"}
          - --whitelist={__name__="cluster_installer"}
          - --whitelist={__name__="cluster_legacy_scheduler_policy"}
          - --whitelist={__name__="cluster_master_schedulable"}
          - --whitelist={__name__="cluster_operator_conditions"}
          - --whitelist={__name__="cluster_operator_up"}
          - --whitelist={__name__="cluster_version"}
          - --whitelist={__name__="cluster_version_available_updates"}
          - --whitelist={__name__="cluster_version_payload"}
          - --whitelist={__name__="cnv:vmi_status_running:count"}
          - --whitelist={__name__="code:apiserver_request_count:rate:sum"}
          - --whitelist={__name__="code:apiserver_request_total:rate:sum"}
          - --whitelist={__name__="console_url"}
          - --whitelist={__name__="count:up0"}
          - --whitelist={__name__="count:up1"}
          - --whitelist={__name__="csv_abnormal"}
          - --whitelist={__name__="csv_succeeded"}
          - --whitelist={__name__="insightsclient_request_send_total"}
          - --whitelist={__name__="instance:etcd_object_counts:sum"}
          - --whitelist={__name__="job:ceph_osd_metadata:count"}
          - --whitelist={__name__="job:ceph_pools_iops:total"}
          - --whitelist={__name__="job:ceph_pools_iops_bytes:total"}
          - --whitelist={__name__="job:ceph_versions_running:count"}
          - --whitelist={__name__="job:kube_pv:count"}
          - --whitelist={__name__="job:noobaa_bucket_count:sum"}
          - --whitelist={__name__="job:noobaa_total_object_count:sum"}
          - --whitelist={__name__="job:noobaa_total_unhealthy_buckets:sum"}
          - --whitelist={__name__="monitoring:container_memory_working_set_bytes:sum"}
          - --whitelist={__name__="monitoring:haproxy_server_http_responses_total:sum"}
          - --whitelist={__name__="node_role_os_version_machine:cpu_capacity_cores:sum"}
          - --whitelist={__name__="node_role_os_version_machine:cpu_capacity_sockets:sum"}
          - --whitelist={__name__="node_uname_info"}
          - --whitelist={__name__="noobaa_accounts_num"}
          - --whitelist={__name__="noobaa_total_usage"}
          - --whitelist={__name__="olm_resolution_duration_seconds"}
          - --whitelist={__name__="openshift:cpu_usage_cores:sum"}
          - --whitelist={__name__="openshift:memory_usage_bytes:sum"}
          - --whitelist={__name__="openshift:prometheus_tsdb_head_samples_appended_total:sum"}
          - --whitelist={__name__="openshift:prometheus_tsdb_head_series:sum"}
          - --whitelist={__name__="rhmi_status"}
          - --whitelist={__name__="subscription_sync_total"}
          - --whitelist={__name__="up"}
          - --whitelist={__name__="workload:cpu_usage_cores:sum"}
          - --whitelist={__name__="workload:memory_usage_bytes:sum"}
          - --whitelist={__name__=~"cluster:usage:.*"}
          - --elide-label=prometheus_replica
          - --log-level=${TELEMETER_LOG_LEVEL}
          - --token-expire-seconds=${TELEMETER_SERVER_TOKEN_EXPIRE_SECONDS}
          - --limit-bytes=5242880
          - --forward-url=${TELEMETER_FORWARD_URL}
          - --log-level=debug
          env:
          - name: AUTHORIZE_URL
            valueFrom:
              secretKeyRef:
                key: authorize_url
                name: telemeter-server
          - name: OIDC_ISSUER
            valueFrom:
              secretKeyRef:
                key: oidc_issuer
                name: telemeter-server
          - name: CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                key: client_secret
                name: telemeter-server
          - name: CLIENT_ID
            valueFrom:
              secretKeyRef:
                key: client_id
                name: telemeter-server
          image: ${IMAGE_CANARY}:${IMAGE_CANARY_TAG}
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8443
              scheme: HTTPS
          name: telemeter-server
          ports:
          - containerPort: 8443
            name: external
          - containerPort: 8081
            name: internal
          readinessProbe:
            httpGet:
              path: /healthz/ready
              port: 8443
              scheme: HTTPS
          resources:
            limits:
              cpu: ${TELEMETER_SERVER_CPU_LIMIT}
              memory: ${TELEMETER_SERVER_MEMORY_LIMIT}
            requests:
              cpu: ${TELEMETER_SERVER_CPU_REQUEST}
              memory: ${TELEMETER_SERVER_MEMORY_REQUEST}
          volumeMounts:
          - mountPath: /etc/pki/service
            name: telemeter-server-tls
            readOnly: false
        serviceAccountName: telemeter-server
        volumes:
        - name: secret-telemeter-server
          secret:
            secretName: telemeter-server
        - name: telemeter-server-tls
          secret:
            secretName: telemeter-server-shared
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app.kubernetes.io/name: memcached
    name: memcached
  spec:
    clusterIP: None
    ports:
    - name: client
      port: 11211
      targetPort: 11211
    - name: metrics
      port: 9150
      targetPort: 9150
    selector:
      app.kubernetes.io/component: telemeter-cache
      app.kubernetes.io/instance: telemeter
      app.kubernetes.io/name: memcached
      app.kubernetes.io/part-of: telemeter
- apiVersion: monitoring.coreos.com/v1
  kind: ServiceMonitor
  metadata:
    labels:
      app.kubernetes.io/name: memcached
    name: memcached
  spec:
    endpoints:
    - interval: 30s
      port: metrics
    jobLabel: app.kubernetes.io/component
    selector:
      matchLabels:
        app.kubernetes.io/component: telemeter-cache
        app.kubernetes.io/instance: telemeter
        app.kubernetes.io/name: memcached
        app.kubernetes.io/part-of: telemeter
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    labels:
      app.kubernetes.io/component: telemeter-cache
      app.kubernetes.io/instance: telemeter
      app.kubernetes.io/name: memcached
      app.kubernetes.io/part-of: telemeter
    name: memcached
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/component: telemeter-cache
        app.kubernetes.io/instance: telemeter
        app.kubernetes.io/name: memcached
        app.kubernetes.io/part-of: telemeter
    serviceName: memcached
    template:
      metadata:
        labels:
          app.kubernetes.io/component: telemeter-cache
          app.kubernetes.io/instance: telemeter
          app.kubernetes.io/name: memcached
          app.kubernetes.io/part-of: telemeter
      spec:
        containers:
        - args:
          - -m 1024
          - -I 1m
          - -c 1024
          - -v
          image: ${MEMCACHED_IMAGE}:${MEMCACHED_IMAGE_TAG}
          name: memcached
          ports:
          - containerPort: 11211
            name: client
          resources:
            limits:
              cpu: ${MEMCACHED_CPU_LIMIT}
              memory: ${MEMCACHED_MEMORY_LIMIT}
            requests:
              cpu: ${MEMCACHED_CPU_REQUEST}
              memory: ${MEMCACHED_MEMORY_REQUEST}
        - args:
          - --memcached.address=localhost:11211
          - --web.listen-address=0.0.0.0:9150
          image: ${MEMCACHED_EXPORTER_IMAGE}:${MEMCACHED_EXPORTER_IMAGE_TAG}
          name: memcached-exporter
          ports:
          - containerPort: 9150
            name: metrics
          resources:
            limits:
              cpu: ${MEMCACHED_EXPORTER_CPU_LIMIT}
              memory: ${MEMCACHED_EXPORTER_MEMORY_LIMIT}
            requests:
              cpu: ${MEMCACHED_EXPORTER_CPU_REQUEST}
              memory: ${MEMCACHED_EXPORTER_MEMORY_REQUEST}
- apiVersion: v1
  data:
    nginx.conf: |
      daemon off;
      worker_processes 1;
      error_log /dev/stderr;
      pid /tmp/nginx.pid;

      events {
          worker_connections 1024;
      }

      http {
        log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for"';

        server {
          listen *:8080;
          server_name _;
          access_log  /dev/stdout  main;
          error_log /dev/stderr;

          location / {
            proxy_set_header THANOS-TENANT FB870BF3-9F3A-44FF-9BF7-D7A047A52F43;
            proxy_pass http://${PROMETHEUS_AMS_REMOTE_WRITE_PROXY_TARGET}.${NAMESPACE}.svc.cluster.local:19291;
          }
        }
      }
  kind: ConfigMap
  metadata:
    labels:
      app.kubernetes.io/component: prometheus-ams
      app.kubernetes.io/instance: remote-write-proxy
      app.kubernetes.io/name: nginx
      app.kubernetes.io/part-of: observatorium
    name: prometheus-remote-write-proxy-config
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app.kubernetes.io/component: prometheus-ams
      app.kubernetes.io/instance: remote-write-proxy
      app.kubernetes.io/name: nginx
      app.kubernetes.io/part-of: observatorium
    name: prometheus-remote-write-proxy
  spec:
    replicas: '{{REPLICAS}}'
    selector:
      matchLabels:
        app.kubernetes.io/instance: remote-write-proxy
        app.kubernetes.io/name: nginx
    template:
      metadata:
        labels:
          app.kubernetes.io/component: prometheus-ams
          app.kubernetes.io/instance: remote-write-proxy
          app.kubernetes.io/name: nginx
          app.kubernetes.io/part-of: observatorium
      spec:
        containers:
        - args:
          - -c
          - /config/nginx.conf
          command:
          - nginx
          image: ${PROMETHEUS_AMS_REMOTE_WRITE_PROXY_IMAGE}:${PROMETHEUS_AMS_REMOTE_WRITE_PROXY_VERSION}
          name: remote-write-proxy
          ports:
          - containerPort: 8080
            name: http
          resources:
            limits:
              cpu: 100m
              memory: 64Mi
            requests:
              cpu: 50m
              memory: 16Mi
          volumeMounts:
          - mountPath: /config
            name: prometheus-remote-write-proxy-config
            readOnly: true
        volumes:
        - configMap:
            name: prometheus-remote-write-proxy-config
          name: prometheus-remote-write-proxy-config
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app.kubernetes.io/component: prometheus-ams
      app.kubernetes.io/instance: remote-write-proxy
      app.kubernetes.io/name: nginx
      app.kubernetes.io/part-of: observatorium
    name: prometheus-ams-remote-write-proxy
  spec:
    ports:
    - name: http
      port: 8080
      targetPort: http
    selector:
      app.kubernetes.io/instance: remote-write-proxy
      app.kubernetes.io/name: nginx
parameters:
- name: NAMESPACE
  value: telemeter
- name: OBSERVATORIUM_LOGS_NAMESPACE
  value: observatorium-logs
- name: THANOS_IMAGE
  value: quay.io/thanos/thanos
- name: THANOS_IMAGE_TAG
  value: master-2020-08-12-70f89d83
- name: STORAGE_CLASS
  value: gp2
- name: PROXY_IMAGE
  value: quay.io/openshift/origin-oauth-proxy
- name: PROXY_IMAGE_TAG
  value: 4.4.0
- name: JAEGER_AGENT_IMAGE
  value: jaegertracing/jaeger-agent
- name: JAEGER_AGENT_IMAGE_TAG
  value: 1.14.0
- name: THANOS_RECEIVE_CONTROLLER_IMAGE
  value: quay.io/observatorium/thanos-receive-controller
- name: THANOS_RECEIVE_CONTROLLER_IMAGE_TAG
  value: master-2019-10-18-d55fee2
- name: THANOS_QUERIER_REPLICAS
  value: "3"
- name: THANOS_STORE_REPLICAS
  value: "5"
- name: THANOS_COMPACTOR_LOG_LEVEL
  value: info
- name: THANOS_COMPACTOR_REPLICAS
  value: "1"
- name: THANOS_RECEIVE_REPLICAS
  value: "5"
- name: THANOS_CONFIG_SECRET
  value: thanos-objectstorage
- name: THANOS_S3_SECRET
  value: telemeter-thanos-stage-s3
- name: THANOS_QUERIER_LOG_LEVEL
  value: info
- name: THANOS_QUERIER_CPU_REQUEST
  value: 100m
- name: THANOS_QUERIER_CPU_LIMIT
  value: "1"
- name: THANOS_QUERIER_MEMORY_REQUEST
  value: 256Mi
- name: THANOS_QUERIER_MEMORY_LIMIT
  value: 1Gi
- name: THANOS_QUERY_FRONTEND_REPLICAS
  value: "3"
- name: THANOS_QUERY_FRONTEND_CPU_REQUEST
  value: 100m
- name: THANOS_QUERY_FRONTEND_CPU_LIMIT
  value: "1"
- name: THANOS_QUERY_FRONTEND_MEMORY_REQUEST
  value: 256Mi
- name: THANOS_QUERY_FRONTEND_MEMORY_LIMIT
  value: 1Gi
- name: THANOS_QUERY_FRONTEND_SPLIT_INTERVAL
  value: 24h
- name: THANOS_QUERY_FRONTEND_MAX_RETRIES
  value: "0"
- name: THANOS_QUERY_FRONTEND_LOG_QUERIES_LONGER_THAN
  value: 5s
- name: THANOS_STORE_LOG_LEVEL
  value: info
- name: THANOS_STORE_CPU_REQUEST
  value: 500m
- name: THANOS_STORE_CPU_LIMIT
  value: "2"
- name: THANOS_STORE_MEMORY_REQUEST
  value: 1Gi
- name: THANOS_STORE_MEMORY_LIMIT
  value: 8Gi
- name: THANOS_STORE_INDEX_CACHE_REPLICAS
  value: "3"
- name: THANOS_STORE_INDEX_CACHE_MEMORY_LIMIT_MB
  value: "2048"
- name: THANOS_STORE_INDEX_CACHE_CONNECTION_LIMIT
  value: "3072"
- name: THANOS_STORE_INDEX_CACHE_MEMCACHED_CPU_REQUEST
  value: 500m
- name: THANOS_STORE_INDEX_CACHE_MEMCACHED_CPU_LIMIT
  value: "3"
- name: THANOS_STORE_INDEX_CACHE_MEMCACHED_MEMORY_REQUEST
  value: 2558Mi
- name: THANOS_STORE_INDEX_CACHE_MEMCACHED_MEMORY_LIMIT
  value: 3Gi
- name: THANOS_STORE_BUCKET_CACHE_REPLICAS
  value: "3"
- name: THANOS_STORE_BUCKET_CACHE_MEMORY_LIMIT_MB
  value: "2048"
- name: THANOS_STORE_BUCKET_CACHE_CONNECTION_LIMIT
  value: "3072"
- name: THANOS_STORE_BUCKET_CACHE_MEMCACHED_CPU_REQUEST
  value: 500m
- name: THANOS_STORE_BUCKET_CACHE_MEMCACHED_CPU_LIMIT
  value: "3"
- name: THANOS_STORE_BUCKET_CACHE_MEMCACHED_MEMORY_REQUEST
  value: 2558Mi
- name: THANOS_STORE_BUCKET_CACHE_MEMCACHED_MEMORY_LIMIT
  value: 3Gi
- name: THANOS_RECEIVE_CPU_REQUEST
  value: "1"
- name: THANOS_RECEIVE_CPU_LIMIT
  value: "1"
- name: THANOS_RECEIVE_MEMORY_REQUEST
  value: 1Gi
- name: THANOS_RECEIVE_MEMORY_LIMIT
  value: 1Gi
- name: THANOS_RECEIVE_DEBUG_ENV
  value: ""
- name: THANOS_RECEIVE_LOG_LEVEL
  value: info
- name: THANOS_COMPACTOR_CPU_REQUEST
  value: 100m
- name: THANOS_COMPACTOR_CPU_LIMIT
  value: "1"
- name: THANOS_COMPACTOR_MEMORY_REQUEST
  value: 1Gi
- name: THANOS_COMPACTOR_MEMORY_LIMIT
  value: 5Gi
- name: THANOS_COMPACTOR_PVC_REQUEST
  value: 50Gi
- name: THANOS_RULER_LOG_LEVEL
  value: info
- name: THANOS_RULER_REPLICAS
  value: "2"
- name: THANOS_RULER_CPU_REQUEST
  value: 100m
- name: THANOS_RULER_CPU_LIMIT
  value: "1"
- name: THANOS_RULER_MEMORY_REQUEST
  value: 512Mi
- name: THANOS_RULER_MEMORY_LIMIT
  value: 1Gi
- name: THANOS_QUERIER_SVC_URL
  value: http://thanos-querier.observatorium.svc:9090
- name: GUBERNATOR_IMAGE
  value: thrawn01/gubernator
- name: GUBERNATOR_IMAGE_TAG
  value: 1.0.0-rc.1
- name: GUBERNATOR_REPLICAS
  value: "2"
- name: GUBERNATOR_CPU_REQUEST
  value: 100m
- name: GUBERNATOR_CPU_LIMIT
  value: 200m
- name: GUBERNATOR_MEMORY_REQUEST
  value: 100Mi
- name: GUBERNATOR_MEMORY_LIMIT
  value: 200Mi
- name: OBSERVATORIUM_API_IMAGE
  value: quay.io/observatorium/observatorium
- name: OBSERVATORIUM_API_IMAGE_TAG
  value: master-2020-11-02-v0.1.1-192-ge324057
- name: OBSERVATORIUM_API_REPLICAS
  value: "3"
- name: OBSERVATORIUM_API_CPU_REQUEST
  value: 100m
- name: OBSERVATORIUM_API_CPU_LIMIT
  value: "1"
- name: OBSERVATORIUM_API_MEMORY_REQUEST
  value: 256Mi
- name: OBSERVATORIUM_API_MEMORY_LIMIT
  value: 1Gi
- name: OPA_AMS_IMAGE
  value: quay.io/observatorium/opa-ams
- name: OPA_AMS_IMAGE_TAG
  value: master-2020-10-28-902d400
- name: OPA_AMS_MEMCACHED_EXPIRE
  value: "300"
- name: OPA_AMS_CPU_REQUEST
  value: 100m
- name: OPA_AMS_MEMORY_REQUEST
  value: 100Mi
- name: OPA_AMS_CPU_LIMIT
  value: 200m
- name: OPA_AMS_MEMORY_LIMIT
  value: 200Mi
- name: OAUTH_PROXY_CPU_REQUEST
  value: 100m
- name: OAUTH_PROXY_MEMORY_REQUEST
  value: 100Mi
- name: OAUTH_PROXY_CPU_LIMITS
  value: 200m
- name: OAUTH_PROXY_MEMORY_LIMITS
  value: 200Mi
- name: IMAGE
  value: quay.io/openshift/origin-telemeter
- name: IMAGE_TAG
  value: v4.0
- name: REPLICAS
  value: "10"
- name: IMAGE_CANARY
  value: quay.io/openshift/origin-telemeter
- name: IMAGE_CANARY_TAG
  value: v4.0
- name: REPLICAS_CANARY
  value: "0"
- name: TELEMETER_SERVER_CPU_REQUEST
  value: 100m
- name: TELEMETER_SERVER_CPU_LIMIT
  value: "1"
- name: TELEMETER_SERVER_MEMORY_REQUEST
  value: 500Mi
- name: TELEMETER_SERVER_MEMORY_LIMIT
  value: 1Gi
- name: MEMCACHED_IMAGE
  value: docker.io/memcached
- name: MEMCACHED_IMAGE_TAG
  value: 1.5.20-alpine
- name: MEMCACHED_EXPORTER_IMAGE
  value: docker.io/prom/memcached-exporter
- name: MEMCACHED_EXPORTER_IMAGE_TAG
  value: v0.6.0
- name: MEMCACHED_CPU_REQUEST
  value: 500m
- name: MEMCACHED_CPU_LIMIT
  value: "3"
- name: MEMCACHED_MEMORY_REQUEST
  value: 1329Mi
- name: MEMCACHED_MEMORY_LIMIT
  value: 1844Mi
- name: MEMCACHED_EXPORTER_CPU_REQUEST
  value: 50m
- name: MEMCACHED_EXPORTER_CPU_LIMIT
  value: 200m
- name: MEMCACHED_EXPORTER_MEMORY_REQUEST
  value: 50Mi
- name: MEMCACHED_EXPORTER_MEMORY_LIMIT
  value: 200Mi
- name: TELEMETER_FORWARD_URL
  value: ""
- name: PROMETHEUS_AMS_REMOTE_WRITE_PROXY_IMAGE
  value: quay.io/app-sre/observatorium-receive-proxy
- name: PROMETHEUS_AMS_REMOTE_WRITE_PROXY_VERSION
  value: 14e844d
- name: THANOS_RECEIVE_TSDB_PATH
  value: /var/thanos/receive
- name: PROMETHEUS_AMS_REMOTE_WRITE_PROXY_TARGET
  value: observatorium-thanos-receive
- name: TELEMETER_SERVER_TOKEN_EXPIRE_SECONDS
  value: "3600"
- name: TELEMETER_LOG_LEVEL
  value: warn
